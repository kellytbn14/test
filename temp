HttpContext.Current.GetOwinContext().Authentication.Challenge(
                new AuthenticationProperties { RedirectUri = Request.Url.ToString() },
                OpenIdConnectAuthenticationDefaults.AuthenticationType
            );



<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Logout.aspx.cs" Inherits="TuProyecto.Logout" %>

<!DOCTYPE html>
<html lang="es">
<head runat="server">
    <meta charset="utf-8" />
    <title>No Autenticado</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
        .container { max-width: 400px; margin: auto; padding: 20px; border: 1px solid #ccc; border-radius: 10px; }
        h2 { color: red; }
        button { padding: 10px 20px; font-size: 16px; cursor: pointer; background-color: #007bff; color: white; border: none; border-radius: 5px; }
        button:hover { background-color: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h2>¡Acceso no permitido!</h2>
        <p>No tienes una sesión activa. Por favor, inicia sesión para continuar.</p>
        <button onclick="window.location.href='Default.aspx'">Volver a la Página Principal</button>
    </div>
</body>
</html>

using System;
using System.Web;
using System.Web.UI;

namespace TuProyecto
{
    public partial class Logout : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // Cerrar sesión
            Session.Clear();  // Elimina todas las variables de sesión
            Session.Abandon(); // Finaliza la sesión actual
            HttpContext.Current.User = null; // Borra la identidad del usuario
            
            // Redirigir al Login después de 5 segundos
            Response.AppendHeader("Refresh", "5;url=Login.aspx");
        }
    }
}



public class AuthPage : System.Web.UI.Page
{
    protected override void OnInit(EventArgs e)
    {
        base.OnInit(e); // Llamar a la implementación base de OnInit

        if (!HttpContext.Current.User.Identity.IsAuthenticated)
        {
            // Mostrar un mensaje en la consola del navegador
            ClientScript.RegisterStartupScript(this.GetType(), "consoleLog", "console.log('[AuthPage] No autenticado! Redirigiendo...');", true);

            // Redirigir al login
            Response.Redirect("~/Login.aspx", true);
            
            // IMPORTANTE: Detener la ejecución de la página
            Context.ApplicationInstance.CompleteRequest();
        }
    }

    protected override void OnLoad(EventArgs e)
    {
        base.OnLoad(e); // Llamar a la implementación base de OnLoad

        // Si el usuario ya está autenticado, obtener el token
        var identity = (ClaimsIdentity)HttpContext.Current.User.Identity;
        var idTokenClaim = identity.FindFirst("id.token");

        if (idTokenClaim != null)
        {
            string idToken = idTokenClaim.Value;

            // Mostrar el ID Token en la consola del navegador
            ClientScript.RegisterStartupScript(this.GetType(), "consoleLogId", $"console.log('ID Token: {idToken}');", true);
        }
    }
}



if (this is System.Web.UI.Page)
{
    Response.Write("ESOP_Landing efectivamente hereda de Page");
}



EnableViewState="true"

 AutoEventWireup="true"


SecurityTokenValidated = context =>
{
    var identity = (ClaimsIdentity)context.AuthenticationTicket.Identity;

    // Obtener el id_token desde el contexto
    var idToken = context.ProtocolMessage.IdToken;

    if (!string.IsNullOrEmpty(idToken))
    {
        // Agregar el id_token como un claim
        identity.AddClaim(new Claim("id_token", idToken));
    }

    return Task.CompletedTask;
}



ClientScript.RegisterStartupScript(this.GetType(), "consoleLog",
                $"console.log('ID Token: {idToken}');", true);


ClientScript.RegisterStartupScript(this.GetType(), "consoleLog", "console.log('Mensaje desde el servidor');", true);


var identity = (ClaimsIdentity)HttpContext.Current.User.Identity;
var idTokenClaim = identity.FindFirst("id_token");

if (idTokenClaim != null)
{
    string idToken = idTokenClaim.Value;
    Console.WriteLine("ID Token: " + idToken);
}




app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
{
    ClientId = ConfigurationManager.AppSettings["ClientId"],
    Authority = ConfigurationManager.AppSettings["Authority"],
    RedirectUri = ConfigurationManager.AppSettings["RedirectUri"],
    ResponseType = "code",  // Se usa "code" en lugar de "id_token"
    Scope = "openid profile",
    SignInAsAuthenticationType = "Cookies",
    UseTokenLifetime = false,
    Notifications = new OpenIdConnectAuthenticationNotifications
    {
        AuthorizationCodeReceived = async context =>
        {
            var code = context.Code;

            // Intercambiar el código por tokens (Acceso y Refresh Token)
            var tokenClient = new HttpClient();
            var tokenResponse = await tokenClient.PostAsync(ConfigurationManager.AppSettings["TokenEndpoint"], 
                new FormUrlEncodedContent(new Dictionary<string, string>
                {
                    { "client_id", ConfigurationManager.AppSettings["ClientId"] },
                    { "client_secret", ConfigurationManager.AppSettings["ClientSecret"] },
                    { "code", code },
                    { "redirect_uri", ConfigurationManager.AppSettings["RedirectUri"] },
                    { "grant_type", "authorization_code" }
                }));

            var tokenResult = await tokenResponse.Content.ReadAsStringAsync();
            // Procesar tokens aquí (acceso, refresh, etc.)
        }
    }
});



using System;
using System.Web;

namespace OIDC.WebForm
{
    public class BasePage : System.Web.UI.Page
    {
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if (!Request.IsAuthenticated) // Verifica si el usuario está autenticado
            {
                Response.Redirect("~/Login.aspx"); // Redirige al login si no está autenticado
            }
        }
    }
}




int expirationMinutes = int.TryParse(ConfigurationManager.AppSettings["AuthCookieExpirationMinutes"], out int minutes) ? minutes : 30;

using System;
using System.Configuration;
using Microsoft.Owin;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Owin;

public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        string clientId = ConfigurationManager.AppSettings["WamClientId"];
        string tenantId = ConfigurationManager.AppSettings["WamTenantId"];
        string authority = ConfigurationManager.AppSettings["WamAuthority"];
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(tenantId) || 
            string.IsNullOrEmpty(authority) || string.IsNullOrEmpty(redirectUri))
        {
            throw new Exception("Faltan configuraciones en web.config");
        }

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = "Cookies"
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = clientId,
            Authority = authority,
            RedirectUri = redirectUri,
            ResponseType = "code id_token",
            Scope = "openid profile email",
            SignInAsAuthenticationType = "Cookies",
            UseTokenLifetime = false,
            SaveTokens = true
        });
    }
}
        int expirationMinutes = int.TryParse(ConfigurationManager.AppSettings["AuthCookieExpirationMinutes"], out int minutes) ? minutes : 30;


<configuration>
  <appSettings>
    <add key="WamClientId" value="tu-client-id" />
    <add key="WamTenantId" value="tu-tenant-id" />
    <add key="WamAuthority" value="https://login.microsoftonline.com/{tu-tenant-id}/v2.0" />
    <add key="WamRedirectUri" value="https://localhost:44333/signin-oidc" />
  </appSettings>
</configuration>


using System;
using System.Configuration;
using Microsoft.Owin;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Owin;

public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        string clientId = ConfigurationManager.AppSettings["WamClientId"];
        string tenantId = ConfigurationManager.AppSettings["WamTenantId"];
        string authority = ConfigurationManager.AppSettings["WamAuthority"];
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        if (string.IsNullOrEmpty(clientId) || string.IsNullOrEmpty(tenantId) || 
            string.IsNullOrEmpty(authority) || string.IsNullOrEmpty(redirectUri))
        {
            throw new Exception("Faltan configuraciones en web.config");
        }

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = "Cookies"
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = clientId,
            Authority = authority,
            RedirectUri = redirectUri,
            ResponseType = "code id_token",
            Scope = "openid profile email",
            SignInAsAuthenticationType = "Cookies",
            UseTokenLifetime = false,
            SaveTokens = true
        });
    }
}






<br /><br />

        <!-- Campo de entrada para recibir el código -->
        <label for="txtCode">Código:</label>
        <asp:TextBox ID="txtCode" runat="server"></asp:TextBox>

        <br /><br />


<asp:Button ID="btnLogout" runat="server" Text="Logout" OnClick="LogoutButton_Click" CssClass="btn btn-danger" />



using System;
using System.Web;
using System.Web.UI;

namespace OIDC.NETFramework
{
    public partial class Callback : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // 1️⃣ Verificar si hubo error en la autenticación
            string error = Request.QueryString["error"];
            if (!string.IsNullOrEmpty(error))
            {
                Response.Write("Error en autenticación: " + error);
                return;
            }

            // 2️⃣ Obtener parámetros de la respuesta OIDC
            string code = Request.QueryString["code"];
            string idToken = Request.QueryString["id_token"];
            string state = Request.QueryString["state"];

            // 3️⃣ Validar el 'state' para prevenir ataques CSRF
            string expectedState = Session["oidc_state"] as string;
            if (string.IsNullOrEmpty(state) || state != expectedState)
            {
                Response.Write("Error: El parámetro 'state' no coincide. Posible ataque CSRF.");
                return;
            }

            // 4️⃣ Si recibimos 'code', podemos intercambiarlo por tokens (Authorization Code Flow)
            if (!string.IsNullOrEmpty(code))
            {
                Response.Write("Código de autorización recibido: " + code);
                // Aquí debes hacer una solicitud HTTP al token endpoint para obtener access_token y id_token
                // (Necesitas un método para hacer un POST a `token_uri`).
            }

            // 5️⃣ Si ya recibimos el 'id_token', significa que el usuario está autenticado
            if (!string.IsNullOrEmpty(idToken))
            {
                Response.Write("ID Token recibido, autenticación exitosa.");
                // Aquí puedes decodificar el id_token y extraer la información del usuario.
            }
        }
    }
}


<EnableAutoLaunch>false</EnableAutoLaunch>
protected void Page_Load(object sender, EventArgs e)
{
    if (User.Identity.IsAuthenticated)
    {
        var claimsIdentity = (ClaimsIdentity)User.Identity;
        var idToken = claimsIdentity.FindFirst("id_token")?.Value;

        if (idToken != null)
        {
            Response.Write("ID Token: " + idToken);
        }
    }
}





using System;
using System.Collections.Specialized;
using System.Net;
using System.Text;
using System.Web;
using Newtonsoft.Json.Linq;

namespace OIDC.NETFramework
{
    public partial class Callback : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            string code = Request.QueryString["code"];
            if (string.IsNullOrEmpty(code))
            {
                Response.Write("Error: No se recibió el código de autorización.");
                return;
            }

            string tokenUrl = "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token";
            using (WebClient client = new WebClient())
            {
                var postData = new NameValueCollection();
                postData["grant_type"] = "authorization_code";
                postData["client_id"] = "HRSSORefresh";
                postData["client_secret"] = "36567bd2-666e-491c-a511-5028eb7a4f13";
                postData["code"] = code;
                postData["redirect_uri"] = "https://localhost:44333/oidc/callback";

                byte[] responseBytes = client.UploadValues(tokenUrl, "POST", postData);
                string responseString = Encoding.UTF8.GetString(responseBytes);
                JObject tokenResponse = JObject.Parse(responseString);

                string idToken = tokenResponse["id_token"]?.ToString();
                string accessToken = tokenResponse["access_token"]?.ToString();

                if (string.IsNullOrEmpty(idToken))
                {
                    Response.Write("Error: No se recibió un ID Token.");
                    return;
                }

                // Guardar en sesión para validar autenticación
                Session["id_token"] = idToken;
                Session["access_token"] = accessToken;

                Response.Redirect("Default.aspx");
            }
        }
    }
}


curl -X POST "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "grant_type=authorization_code" \
     -d "client_id=HRSSORefresh" \
     -d "client_secret=36567bd2-666e-491c-a511-5028eb7a4f13" \
     -d "code=TU_AUTH_CODE" \
     -d "redirect_uri=https://localhost:44333/oidc/callback"




using (var client = new HttpClient())
{
    var tokenUrl = "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token";

    var postData = new Dictionary<string, string>
    {
        { "grant_type", "authorization_code" },
        { "client_id", "HRSSORefresh" },
        { "client_secret", "36567bd2-666e-491c-a511-5028eb7a4f13" },
        { "code", code },
        { "redirect_uri", "https://localhost:44333/oidc/callback" }
    };

    var content = new FormUrlEncodedContent(postData);

    HttpResponseMessage response = await client.PostAsync(tokenUrl, content);
    string responseString = await response.Content.ReadAsStringAsync();

    Response.Write(responseString); // Para ver la respuesta del servidor
}



try
                {
                    HttpResponseMessage response = client.PostAsync(tokenUrl, content).Result;
                    string responseString = response.Content.ReadAsStringAsync().Result;

                    Response.Write(responseString); // Verifica si recibes el access_token
                }
                catch (Exception ex)
                {
                    Response.Write("Error en la solicitud del token: " + ex.Message);
                }




protected void SignInUser(string userName, string idToken)
{
    var claims = new List<Claim>
    {
        new Claim(ClaimTypes.Name, userName),
        new Claim("id_token", idToken) // Guardar ID Token si es necesario
    };

    var identity = new ClaimsIdentity(claims, "Cookies");

    var ctx = HttpContext.Current.GetOwinContext();
    var authManager = ctx.Authentication;

    authManager.SignIn(new AuthenticationProperties { IsPersistent = true }, identity);
}



curl -X POST https://tu-idp.com/token \
  -d "grant_type=password" \
  -d "client_id=tu-client-id" \
  -d "client_secret=tu-client-secret" \
  -d "username=usuario@ejemplo.com" \
  -d "password=contraseña-del-usuario" \
  -d "scope=openid" \
  -d "redirect_uri=https://localhost:44333/oidc/callback"



public void SignOutUser()
{
    var ctx = HttpContext.Current.GetOwinContext();
    var authManager = ctx.Authentication;

    // Cerrar sesión y eliminar la cookie
    authManager.SignOut("Cookies");
}


<button id="logoutButton" runat="server" class="btn btn-danger" OnClick="LogoutButton_Click">Logout</button>

