using System;
using System.Web;
using System.Web.UI;

namespace OIDC.NETFramework
{
    public partial class Callback : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // 1️⃣ Verificar si hubo error en la autenticación
            string error = Request.QueryString["error"];
            if (!string.IsNullOrEmpty(error))
            {
                Response.Write("Error en autenticación: " + error);
                return;
            }

            // 2️⃣ Obtener parámetros de la respuesta OIDC
            string code = Request.QueryString["code"];
            string idToken = Request.QueryString["id_token"];
            string state = Request.QueryString["state"];

            // 3️⃣ Validar el 'state' para prevenir ataques CSRF
            string expectedState = Session["oidc_state"] as string;
            if (string.IsNullOrEmpty(state) || state != expectedState)
            {
                Response.Write("Error: El parámetro 'state' no coincide. Posible ataque CSRF.");
                return;
            }

            // 4️⃣ Si recibimos 'code', podemos intercambiarlo por tokens (Authorization Code Flow)
            if (!string.IsNullOrEmpty(code))
            {
                Response.Write("Código de autorización recibido: " + code);
                // Aquí debes hacer una solicitud HTTP al token endpoint para obtener access_token y id_token
                // (Necesitas un método para hacer un POST a `token_uri`).
            }

            // 5️⃣ Si ya recibimos el 'id_token', significa que el usuario está autenticado
            if (!string.IsNullOrEmpty(idToken))
            {
                Response.Write("ID Token recibido, autenticación exitosa.");
                // Aquí puedes decodificar el id_token y extraer la información del usuario.
            }
        }
    }
}


<EnableAutoLaunch>false</EnableAutoLaunch>
protected void Page_Load(object sender, EventArgs e)
{
    if (User.Identity.IsAuthenticated)
    {
        var claimsIdentity = (ClaimsIdentity)User.Identity;
        var idToken = claimsIdentity.FindFirst("id_token")?.Value;

        if (idToken != null)
        {
            Response.Write("ID Token: " + idToken);
        }
    }
}





using System;
using System.Collections.Specialized;
using System.Net;
using System.Text;
using System.Web;
using Newtonsoft.Json.Linq;

namespace OIDC.NETFramework
{
    public partial class Callback : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            string code = Request.QueryString["code"];
            if (string.IsNullOrEmpty(code))
            {
                Response.Write("Error: No se recibió el código de autorización.");
                return;
            }

            string tokenUrl = "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token";
            using (WebClient client = new WebClient())
            {
                var postData = new NameValueCollection();
                postData["grant_type"] = "authorization_code";
                postData["client_id"] = "HRSSORefresh";
                postData["client_secret"] = "36567bd2-666e-491c-a511-5028eb7a4f13";
                postData["code"] = code;
                postData["redirect_uri"] = "https://localhost:44333/oidc/callback";

                byte[] responseBytes = client.UploadValues(tokenUrl, "POST", postData);
                string responseString = Encoding.UTF8.GetString(responseBytes);
                JObject tokenResponse = JObject.Parse(responseString);

                string idToken = tokenResponse["id_token"]?.ToString();
                string accessToken = tokenResponse["access_token"]?.ToString();

                if (string.IsNullOrEmpty(idToken))
                {
                    Response.Write("Error: No se recibió un ID Token.");
                    return;
                }

                // Guardar en sesión para validar autenticación
                Session["id_token"] = idToken;
                Session["access_token"] = accessToken;

                Response.Redirect("Default.aspx");
            }
        }
    }
}


curl -X POST "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "grant_type=authorization_code" \
     -d "client_id=HRSSORefresh" \
     -d "client_secret=36567bd2-666e-491c-a511-5028eb7a4f13" \
     -d "code=TU_AUTH_CODE" \
     -d "redirect_uri=https://localhost:44333/oidc/callback"




using (var client = new HttpClient())
{
    var tokenUrl = "https://wam-ist.cloud.bns/sso/oauth2/bns/access_token";

    var postData = new Dictionary<string, string>
    {
        { "grant_type", "authorization_code" },
        { "client_id", "HRSSORefresh" },
        { "client_secret", "36567bd2-666e-491c-a511-5028eb7a4f13" },
        { "code", code },
        { "redirect_uri", "https://localhost:44333/oidc/callback" }
    };

    var content = new FormUrlEncodedContent(postData);

    HttpResponseMessage response = await client.PostAsync(tokenUrl, content);
    string responseString = await response.Content.ReadAsStringAsync();

    Response.Write(responseString); // Para ver la respuesta del servidor
}



try
                {
                    HttpResponseMessage response = client.PostAsync(tokenUrl, content).Result;
                    string responseString = response.Content.ReadAsStringAsync().Result;

                    Response.Write(responseString); // Verifica si recibes el access_token
                }
                catch (Exception ex)
                {
                    Response.Write("Error en la solicitud del token: " + ex.Message);
                }
