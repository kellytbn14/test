✅ 1. Activar System.Diagnostics para Ver Detalles
Antes de hacer cambios, activa logs detallados de OWIN para ver qué está pasando.

📌 Agrega esto en web.config:

<system.diagnostics>
    <sources>
        <source name="System.IdentityModel.Tokens.Jwt" switchValue="Verbose">
            <listeners>
                <add name="JwtTrace" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\logs\jwt.log"/>
            </listeners>
        </source>
        <source name="Microsoft.Owin" switchValue="Verbose">
            <listeners>
                <add name="OwinTrace" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\logs\owin.log"/>
            </listeners>
        </source>
    </sources>
</system.diagnostics>

----------------------------------------------------------------------------------------------------------------------------------

✅ 3. Revisar las Cookies de Sesión
Otro problema puede ser que la cookie de sesión no se esté estableciendo correctamente, haciendo que la app no "recuerde" que ya se autenticó.

📌 Prueba forzando el almacenamiento de la cookie con UseCookieAuthentication:

app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = "Cookies",
    ExpireTimeSpan = TimeSpan.FromMinutes(60),
    SlidingExpiration = true, // 🔹 Mantiene la sesión activa si el usuario sigue navegando
});


✅ 2. Asegurar que el Middleware de Autenticación No Redirija de Nuevo
Asegúrate de que la lógica de autenticación en Startup.cs solo redirija cuando realmente no haya sesión.

📌 Modifica esta parte de Startup.cs para evitar el bucle:

app.Use(async (context, next) =>
{
    var user = context.Authentication.User;

    // 🔹 Solo redirigir a WAM si el usuario NO está autenticado
    if (user == null || !user.Identity.IsAuthenticated)
    {
        context.Authentication.Challenge(new AuthenticationProperties { RedirectUri = "/" }, "oidc");
        return;
    }

    await next();
});
----------------------------------------------------------------------------------------------------------------------------------
     

using Microsoft.Owin;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Owin;
using System;
using System.Configuration;

[assembly: OwinStartup(typeof(MyApp.Startup))]

namespace MyApp
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Usa Cookies para manejar la autenticación de OWIN
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = "Cookies"
            });

            // Configurar OpenID Connect con WAM
            app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
            {
                AuthenticationType = "oidc",
                ClientId = ConfigurationManager.AppSettings["ClientId"],
                Authority = ConfigurationManager.AppSettings["Authority"], // URL del WAM
                RedirectUri = ConfigurationManager.AppSettings["RedirectUri"],
                ResponseType = "code id_token",
                Scope = "openid profile email",
                SignInAsAuthenticationType = "Cookies",
                UseTokenLifetime = false,

                Notifications = new OpenIdConnectAuthenticationNotifications
                {
                    AuthenticationFailed = context =>
                    {
                        context.HandleResponse();
                        return System.Threading.Tasks.Task.FromResult(0);
                    }
                }
            });

            // Redirige a la autenticación al iniciar la app (sin botón de login)
            app.Use(async (context, next) =>
            {
                if (!context.Authentication.User.Identity.IsAuthenticated)
                {
                    context.Authentication.Challenge(new AuthenticationProperties { RedirectUri = "/" }, "oidc");
                    return;
                }
                await next();
            });
        }
    }
}


----------------------------------------------------------------------------------------------------------------------------------

1️⃣ Configurar UseCookieAuthentication Correctamente
Si OWIN no guarda la sesión, el usuario siempre parecerá "No autenticado". Asegúrate de que UseCookieAuthentication esté configurado así en Startup.cs:

app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    ExpireTimeSpan = System.TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always,
    CookieSameSite = SameSiteMode.Lax,
    LoginPath = new PathString("/signin-oidc"),  // 🔹 Esto ayuda a OWIN a reconocer la sesión
});
}

2️⃣ Forzar OWIN a Validar el Token de WAM
Si SecurityTokenValidated nunca se ejecuta, significa que el token de autenticación de WAM no está siendo leído correctamente. Vamos a forzarlo:

📝 SecurityTokenValidated - Forzar la Sesión
SecurityTokenValidated = context =>
{
    var identity = context.AuthenticationTicket.Identity;

    Debug.WriteLine("✅ OWIN: Token de seguridad validado.");
    Debug.WriteLine($"🔹 Usuario autenticado: {identity.Name}");

    // 🔹 Agregar manualmente un Claim para que OWIN reconozca la sesión
    identity.AddClaim(new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.Name, identity.Name ?? "Unknown"));

    // 🔹 Guardar manualmente la sesión en OWIN
    context.AuthenticationTicket = new AuthenticationTicket(identity, context.AuthenticationTicket.Properties);
    return Task.CompletedTask;
};


3️⃣ Revisar las Cookies para Ver si WAM Está Autenticando
Si OWIN sigue sin reconocer la sesión, revisemos si WAM realmente está creando cookies.

📝 Startup.cs - Verificar si WAM Está Creando Cookies
app.Use(async (context, next) =>
{
    Debug.WriteLine("🔹 Revisando Cookies de WAM...");
    foreach (var cookie in context.Request.Cookies)
    {
        Debug.WriteLine($"🍪 Cookie detectada: {cookie.Key} = {cookie.Value}");
    }
    await next.Invoke();
});

4️⃣ Capturar y Pasar el Token de WAM a OWIN
Si WAM ya autenticó al usuario pero OWIN no lo reconoce, podemos capturar el token y pasarlo manualmente a OWIN.

📝 UseAuthenticationMiddleware - Capturar el Token de WAM
public static void UseAuthenticationMiddleware(IAppBuilder app)
{
    app.Use(async (context, next) =>
    {
        var user = HttpContext.Current.User;
        bool isAuthenticated = user?.Identity != null && user.Identity.IsAuthenticated;

        Debug.WriteLine($"✅ Middleware - IsAuthenticated: {isAuthenticated}");

        // 🔹 Si ya está autenticado en WAM pero OWIN no lo reconoce, forzamos la autenticación
        if (isAuthenticated && !context.Authentication.User.Identity.IsAuthenticated)
        {
            Debug.WriteLine("🔹 WAM ya autenticó al usuario. Forzando autenticación en OWIN.");

            var identity = user.Identity as System.Security.Claims.ClaimsIdentity;
            if (identity != null)
            {
                context.Authentication.SignIn(new AuthenticationProperties { IsPersistent = true }, identity);
            }
        }

        await next.Invoke();
    });
}


---------------------------------------------------------------------------------------------------------

3️⃣ Configurar OWIN para Interceptar HRAdminPortal
📌 Ahora tenemos que hacer que OWIN escuche la respuesta de autenticación en la URL de HRAdminPortal.

🔹 Modifica Global.asax.cs para capturar la autenticación en HRAdminPortal

protected void Application_BeginRequest()
{
    var requestPath = HttpContext.Current.Request.Url.AbsolutePath;

    Debug.WriteLine($"📌 Verificando ruta de autenticación: {requestPath}");

    if (requestPath.Contains("/hrpassiis/HRAdminPortal"))
    {
        Debug.WriteLine("✅ Detectada URL de autenticación de WAM, procesando login en OWIN.");
        
        HttpContext.Current.GetOwinContext().Authentication.Challenge(
            new AuthenticationProperties { RedirectUri = "/" }, 
            OpenIdConnectAuthenticationDefaults.AuthenticationType
        );
    }
}


4️⃣ Verificar si OWIN Recibe el Token
📌 Si OWIN no recibe el token, revisa si está en la cabecera HTTP.

🔹 Agrega este código en Startup.cs para imprimir los headers HTTP:

4️⃣ Verificar si OWIN Recibe el Token
📌 Si OWIN no recibe el token, revisa si está en la cabecera HTTP.

🔹 Agrega este código en Startup.cs para imprimir los headers HTTP:


---------------------------------------------------------------------------------------------------------









🔥 Paso 3: Confirmar que OWIN Está Procesando Solicitudes
📌 OWIN a veces no ejecuta el middleware en ASP.NET MVC si no está configurado correctamente.

🔹 Modifica Startup.cs y agrega esto:

app.Use(async (context, next) =>
{
    Debug.WriteLine($"➡ OWIN Middleware ejecutando: {context.Request.Path}");
    await next.Invoke();
});

1️⃣ Deshabilitar el Challenge Infinito en RedirectToIdentityProvider
Actualmente, cada vez que OWIN verifica la autenticación y no encuentra sesión, hace un nuevo challenge. Vamos a detener ese comportamiento si ya se ha autenticado una vez.

📝 Startup.cs - Modifica RedirectToIdentityProvider

Notifications = new OpenIdConnectAuthenticationNotifications
{
    RedirectToIdentityProvider = context =>
    {
        Debug.WriteLine("🔹 OWIN: Enviando solicitud de autenticación a WAM...");

        // 🔹 Evitar redirección infinita
        if (context.Request.Uri.AbsolutePath.Contains("/signin-oidc") && context.Request.User.Identity.IsAuthenticated)
        {
            Debug.WriteLine("✅ Usuario ya autenticado, omitiendo nuevo challenge.");
            context.HandleResponse();
            return Task.CompletedTask;
        }

        return Task.CompletedTask;
    },
    MessageReceived = context =>
    {
        Debug.WriteLine("🔹 OWIN: Mensaje recibido de OIDC.");
        return Task.CompletedTask;
    },
    SecurityTokenValidated = context =>
    {
        Debug.WriteLine("✅ OWIN: Token de seguridad validado.");
        return Task.CompletedTask;
    }
}

3️⃣ Forzar a OWIN a Leer la Sesión Desde WAM
📌 Si el usuario ya está autenticado con WAM pero OWIN no lo detecta, debemos hacer que OWIN lea la sesión correctamente.

📝 AutoLoginFilter.cs - Validar Si WAM Ya Autenticó

public override void OnActionExecuting(ActionExecutingContext filterContext)
{
    var context = HttpContext.Current;
    var user = context.User;

    Debug.WriteLine("====== USER INFO ======");
    Debug.WriteLine($"IsAuthenticated: {user?.Identity?.IsAuthenticated}");

    // 🔹 Si el usuario ya tiene sesión con WAM, asegurarnos de que OWIN lo reconoce
    if (user != null && user.Identity.IsAuthenticated)
    {
        Debug.WriteLine("✅ Usuario autenticado con WAM.");
        return;
    }

    Debug.WriteLine("🔴 Usuario NO autenticado. Lanzando challenge...");

    // 🔹 Evitar Challenge infinito en la misma sesión
    if (context.Session["AuthAttempt"] != null)
    {
        Debug.WriteLine("🔄 Loop detectado. Mostrando error en lugar de redirigir.");
        filterContext.Result = new RedirectResult("/Account/LoginError");
        return;
    }

    context.Session["AuthAttempt"] = "true";

    // 🔹 Lanzar Challenge
    context.GetOwinContext().Authentication.Challenge(
        new AuthenticationProperties { RedirectUri = context.Request.Url.ToString() },
        OpenIdConnectAuthenticationDefaults.AuthenticationType
    );

    filterContext.Result = new HttpUnauthorizedResult();
}


4️⃣ Forzar WAM a Pasar el Token Correctamente
📌 Si WAM no está pasando el token correctamente, debemos asegurarnos de que se envía en la cabecera HTTP.

📝 Startup.cs - Forzar a WAM a Pasar el Token

app.Use(async (context, next) =>
{
    if (context.Request.Headers.ContainsKey("Authorization"))
    {
        Debug.WriteLine("🔹 Token de WAM detectado en la cabecera.");
    }
    else
    {
        Debug.WriteLine("⚠️ No hay token de WAM en la cabecera.");
    }

    await next.Invoke();
});














using System.Diagnostics;
using System.Security.Claims;
using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var context = HttpContext.Current;
            var user = context.User;
            var requestPath = context.Request.Path;

            Debug.WriteLine("====== USER INFO ======");
            Debug.WriteLine($"IsAuthenticated: {user?.Identity?.IsAuthenticated}");
            Debug.WriteLine($"Current URL: {context.Request.Url}");

            // 🔹 Evita redirigir si estamos en el callback de autenticación
            if (requestPath.StartsWith("/signin-oidc", System.StringComparison.OrdinalIgnoreCase))
            {
                Debug.WriteLine("🟢 Callback de OIDC detectado. No redirigir.");
                return;
            }

            // 🔹 Si el usuario ya está autenticado, no hacemos nada
            if (user != null && user.Identity.IsAuthenticated)
            {
                Debug.WriteLine("✅ Usuario autenticado. Continuando...");
                return;
            }

            Debug.WriteLine("🔴 Usuario no autenticado.");

            // 🔹 Si ya intentó autenticarse y sigue sin éxito, evitar loop
            if (context.Session["AuthAttempt"] != null)
            {
                Debug.WriteLine("🔄 Se detectó un loop de autenticación. Mostrando error.");
                filterContext.Result = new RedirectResult("/Account/LoginError");
                return;
            }

            // 🔹 Guardar en sesión que estamos intentando autenticarnos
            context.Session["AuthAttempt"] = "true";

            // 🔹 Redirigir al login
            Debug.WriteLine("🔹 Redirigiendo a login...");
            context.GetOwinContext().Authentication.Challenge(
                new AuthenticationProperties { RedirectUri = context.Request.Url.ToString() },
                OpenIdConnectAuthenticationDefaults.AuthenticationType
            );

            filterContext.Result = new HttpUnauthorizedResult();
        }
    }
}



app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    ExpireTimeSpan = System.TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always,
    CookieSameSite = SameSiteMode.Lax
});


public override void OnActionExecuting(ActionExecutingContext filterContext)
{
    var requestPath = HttpContext.Current.Request.Path;

    // No ejecutar autenticación en la página de retorno de OIDC
    if (requestPath.StartsWith("/signin-oidc", System.StringComparison.OrdinalIgnoreCase))
    {
        return;
    }

    var user = HttpContext.Current.User;

    Debug.WriteLine($"IsAuthenticated: {user?.Identity?.IsAuthenticated}");
    
    if (user == null || !user.Identity.IsAuthenticated)
    {
        Debug.WriteLine("🔴 Usuario no autenticado. Redirigiendo a login...");
        
        HttpContext.Current.GetOwinContext().Authentication.Challenge(
            new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
            OpenIdConnectAuthenticationDefaults.AuthenticationType
        );

        filterContext.Result = new HttpUnauthorizedResult();
    }
}



using System.Diagnostics;
using System.Security.Claims;
using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var user = HttpContext.Current.User;

            // 🔹 Ver información del usuario en la consola de Debug
            Debug.WriteLine("====== USER INFO ======");
            if (user != null)
            {
                Debug.WriteLine($"IsAuthenticated: {user.Identity.IsAuthenticated}");
                Debug.WriteLine($"Authentication Type: {user.Identity.AuthenticationType}");
                Debug.WriteLine($"Name: {user.Identity.Name}");

                var claimsIdentity = user.Identity as ClaimsIdentity;
                if (claimsIdentity != null)
                {
                    foreach (var claim in claimsIdentity.Claims)
                    {
                        Debug.WriteLine($"Claim: {claim.Type} - {claim.Value}");
                    }
                }
            }
            else
            {
                Debug.WriteLine("User is NULL!");
            }
            Debug.WriteLine("======================");

            // 🔹 Si el usuario no está autenticado, redirigir al login
            if (user == null || !user.Identity.IsAuthenticated)
            {
                Debug.WriteLine("🔴 Usuario no autenticado. Redirigiendo a login...");

                HttpContext.Current.GetOwinContext().Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                filterContext.Result = new HttpUnauthorizedResult();
            }
        }
    }
}




using Microsoft.Owin;
using Owin;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Microsoft.IdentityModel.Tokens;
using System.Threading.Tasks;
using System.Configuration;
using System.Web.Helpers;

[assembly: OwinStartup(typeof(MyMvcApp.Startup))]

namespace MyMvcApp
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // 🔹 1. Configurar autenticación basada en cookies
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
                ExpireTimeSpan = System.TimeSpan.FromMinutes(60),
                SlidingExpiration = true
            });

            // 🔹 2. Configurar OpenID Connect para autenticación automática
            app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
            {
                ClientId = ConfigurationManager.AppSettings["OIDC:ClientId"],
                Authority = ConfigurationManager.AppSettings["OIDC:Authority"],
                RedirectUri = ConfigurationManager.AppSettings["OIDC:RedirectUri"],
                ResponseType = "id_token",
                Scope = "openid profile email",
                SaveTokens = true,

                TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidAudience = ConfigurationManager.AppSettings["OIDC:ClientId"]
                },

                Notifications = new OpenIdConnectAuthenticationNotifications
                {
                    AuthenticationFailed = context =>
                    {
                        context.HandleResponse();
                        context.Response.Redirect("/Error?message=" + context.Exception.Message);
                        return Task.FromResult(0);
                    }
                }
            });

            // 🔹 3. Evitar problemas con antiforgery tokens en OWIN
            AntiForgeryConfig.UniqueClaimTypeIdentifier = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
        }
    }
}

using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var user = HttpContext.Current.User;
            
            if (user == null || !user.Identity.IsAuthenticated)
            {
                // 🔹 Redirigir automáticamente al login si el usuario no está autenticado
                HttpContext.Current.GetOwinContext().Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                // 🔹 Detener la ejecución de la acción actual
                filterContext.Result = new HttpUnauthorizedResult();
            }
        }
    }
}

using System.Web.Mvc;
using MyMvcApp.Filters;

namespace MyMvcApp.Controllers
{
    [AutoLoginFilter]  // ✅ Aplica el filtro de autenticación automática
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }
    }
}















app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
{
    ClientId = AuthProperties.ClientId,
    ClientSecret = AuthProperties.ClientSecret,
    Authority = AuthProperties.BaseUrl,
    RedirectUri = AuthProperties.RedirectUri,
    CookieManager = new SystemWebCookieManager(),
    SaveTokens = true, // <--- Guarda los tokens en la sesión de autenticación
    Notifications = new OpenIdConnectAuthenticationNotifications
    {
        AuthenticationFailed = OnAuthenticationFailed,
        SecurityTokenValidated = OnSecurityTokenValidated
    }
});

private static async Task OnSecurityTokenValidated(SecurityTokenValidatedNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
{
    var identity = context.AuthenticationTicket.Identity;
    
    // Puedes agregar claims personalizados si es necesario
    identity.AddClaim(new System.Security.Claims.Claim("id_token", context.ProtocolMessage.IdToken));

    context.AuthenticationTicket = new AuthenticationTicket(identity, context.AuthenticationTicket.Properties);
}


app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    LoginPath = new PathString("/Account/Login"),
    ExpireTimeSpan = TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieSameSite = SameSiteMode.Lax, // Ajusta esto si hay problemas con cookies en navegadores modernos
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always
});


public static void UseAuthenticationMiddleware(IAppBuilder app)
{
    app.Use(async (context, next) =>
    {
        var owinContext = context.Get<IOwinContext>();
        var user = owinContext.Authentication.User;
        bool isAuthenticated = user?.Identity != null && user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            // Solo desafía si no estamos ya en un intento de autenticación
            if (!context.Request.Path.Value.Contains("/signin-oidc"))
            {
                owinContext.Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = AuthProperties.RedirectUri },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                context.Response.StatusCode = 401;
                return;
            }
        }

        await next();
    });
}









public static class AuthConfig
{
    public static void ConfigureAuth(IAppBuilder app, string clientId, string clientSecret, string baseUrl, string redirectUri)
    {
        AuthProperties.ClientId = clientId;
        AuthProperties.ClientSecret = clientSecret;
        AuthProperties.BaseUrl = baseUrl;
        AuthProperties.RedirectUri = redirectUri;

        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = AuthProperties.ClientId,
            ClientSecret = AuthProperties.ClientSecret,
            Authority = AuthProperties.BaseUrl,
            RedirectUri = AuthProperties.RedirectUri,
            ResponseType = OpenIdConnectResponseType.CodeIdToken,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }

    public static void UseAuthenticationMiddleware(IAppBuilder app)
    {
        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });
    }
}



public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = "tu-client-id",
            Authority = "https://tu-idp.com",
            RedirectUri = "https://tuapp.com/signin-oidc",
            ResponseType = "code id_token",
            UseTokenLifetime = true,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }
}



protected void Application_BeginRequest(object sender, EventArgs e)
{
    try
    {
        if (!(HttpContext.Current.User?.Identity?.IsAuthenticated ?? false)) // Verifica autenticación correctamente
        {
            string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

            // Redirigir manualmente a WAM sin usar OWIN
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.Redirect(redirectUri, true);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}


protected void Application_PostAuthenticateRequest(object sender, EventArgs e)
{
    var owinContext = HttpContext.Current.GetOwinContext();
    if (owinContext.Authentication.User != null && owinContext.Authentication.User.Identity.IsAuthenticated)
    {
        HttpContext.Current.User = owinContext.Authentication.User;
    }
}

protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User?.Identity?.IsAuthenticated ?? true)
    {
        // NO reemplazar HttpContext.User aquí, solo redirigir si es necesario
        AuthHelper.RedirectToWAM();
    }
}


protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User.Identity.IsAuthenticated)
    {
        AuthHelper.RedirectToWAM(); // Llama a tu método que redirige a WAM
    }
}

public class RequireAuthenticationFilter : AuthorizeAttribute
{
    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
    {
        if (!filterContext.HttpContext.User.Identity.IsAuthenticated)
        {
            AuthHelper.RedirectToWAM(); // Redirige a WAM si el usuario no está autenticado
        }
        else
        {
            base.HandleUnauthorizedRequest(filterContext);
        }
    }
}

public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        filters.Add(new RequireAuthenticationFilter()); // Aplica autenticación a toda la app
        filters.Add(new HandleErrorAttribute());
    }
}

public static void RedirectToWAM()
{
    try
    {
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Redirect(redirectUri, true);
        HttpContext.Current.ApplicationInstance.CompleteRequest();
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}
