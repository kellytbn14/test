public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = "tu-client-id",
            Authority = "https://tu-idp.com",
            RedirectUri = "https://tuapp.com/signin-oidc",
            ResponseType = "code id_token",
            UseTokenLifetime = true,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }
}



protected void Application_BeginRequest(object sender, EventArgs e)
{
    try
    {
        if (!(HttpContext.Current.User?.Identity?.IsAuthenticated ?? false)) // Verifica autenticación correctamente
        {
            string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

            // Redirigir manualmente a WAM sin usar OWIN
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.Redirect(redirectUri, true);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}


protected void Application_PostAuthenticateRequest(object sender, EventArgs e)
{
    var owinContext = HttpContext.Current.GetOwinContext();
    if (owinContext.Authentication.User != null && owinContext.Authentication.User.Identity.IsAuthenticated)
    {
        HttpContext.Current.User = owinContext.Authentication.User;
    }
}

protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User?.Identity?.IsAuthenticated ?? true)
    {
        // NO reemplazar HttpContext.User aquí, solo redirigir si es necesario
        AuthHelper.RedirectToWAM();
    }
}


protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User.Identity.IsAuthenticated)
    {
        AuthHelper.RedirectToWAM(); // Llama a tu método que redirige a WAM
    }
}

public class RequireAuthenticationFilter : AuthorizeAttribute
{
    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
    {
        if (!filterContext.HttpContext.User.Identity.IsAuthenticated)
        {
            AuthHelper.RedirectToWAM(); // Redirige a WAM si el usuario no está autenticado
        }
        else
        {
            base.HandleUnauthorizedRequest(filterContext);
        }
    }
}

public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        filters.Add(new RequireAuthenticationFilter()); // Aplica autenticación a toda la app
        filters.Add(new HandleErrorAttribute());
    }
}

public static void RedirectToWAM()
{
    try
    {
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Redirect(redirectUri, true);
        HttpContext.Current.ApplicationInstance.CompleteRequest();
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}
