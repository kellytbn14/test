app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
{
    ClientId = AuthProperties.ClientId,
    ClientSecret = AuthProperties.ClientSecret,
    Authority = AuthProperties.BaseUrl,
    RedirectUri = AuthProperties.RedirectUri,
    CookieManager = new SystemWebCookieManager(),
    SaveTokens = true, // <--- Guarda los tokens en la sesión de autenticación
    Notifications = new OpenIdConnectAuthenticationNotifications
    {
        AuthenticationFailed = OnAuthenticationFailed,
        SecurityTokenValidated = OnSecurityTokenValidated
    }
});

private static async Task OnSecurityTokenValidated(SecurityTokenValidatedNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
{
    var identity = context.AuthenticationTicket.Identity;
    
    // Puedes agregar claims personalizados si es necesario
    identity.AddClaim(new System.Security.Claims.Claim("id_token", context.ProtocolMessage.IdToken));

    context.AuthenticationTicket = new AuthenticationTicket(identity, context.AuthenticationTicket.Properties);
}


app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    LoginPath = new PathString("/Account/Login"),
    ExpireTimeSpan = TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieSameSite = SameSiteMode.Lax, // Ajusta esto si hay problemas con cookies en navegadores modernos
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always
});


public static void UseAuthenticationMiddleware(IAppBuilder app)
{
    app.Use(async (context, next) =>
    {
        var owinContext = context.Get<IOwinContext>();
        var user = owinContext.Authentication.User;
        bool isAuthenticated = user?.Identity != null && user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            // Solo desafía si no estamos ya en un intento de autenticación
            if (!context.Request.Path.Value.Contains("/signin-oidc"))
            {
                owinContext.Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = AuthProperties.RedirectUri },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                context.Response.StatusCode = 401;
                return;
            }
        }

        await next();
    });
}









public static class AuthConfig
{
    public static void ConfigureAuth(IAppBuilder app, string clientId, string clientSecret, string baseUrl, string redirectUri)
    {
        AuthProperties.ClientId = clientId;
        AuthProperties.ClientSecret = clientSecret;
        AuthProperties.BaseUrl = baseUrl;
        AuthProperties.RedirectUri = redirectUri;

        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = AuthProperties.ClientId,
            ClientSecret = AuthProperties.ClientSecret,
            Authority = AuthProperties.BaseUrl,
            RedirectUri = AuthProperties.RedirectUri,
            ResponseType = OpenIdConnectResponseType.CodeIdToken,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }

    public static void UseAuthenticationMiddleware(IAppBuilder app)
    {
        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });
    }
}



public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = "tu-client-id",
            Authority = "https://tu-idp.com",
            RedirectUri = "https://tuapp.com/signin-oidc",
            ResponseType = "code id_token",
            UseTokenLifetime = true,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }
}



protected void Application_BeginRequest(object sender, EventArgs e)
{
    try
    {
        if (!(HttpContext.Current.User?.Identity?.IsAuthenticated ?? false)) // Verifica autenticación correctamente
        {
            string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

            // Redirigir manualmente a WAM sin usar OWIN
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.Redirect(redirectUri, true);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}


protected void Application_PostAuthenticateRequest(object sender, EventArgs e)
{
    var owinContext = HttpContext.Current.GetOwinContext();
    if (owinContext.Authentication.User != null && owinContext.Authentication.User.Identity.IsAuthenticated)
    {
        HttpContext.Current.User = owinContext.Authentication.User;
    }
}

protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User?.Identity?.IsAuthenticated ?? true)
    {
        // NO reemplazar HttpContext.User aquí, solo redirigir si es necesario
        AuthHelper.RedirectToWAM();
    }
}


protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User.Identity.IsAuthenticated)
    {
        AuthHelper.RedirectToWAM(); // Llama a tu método que redirige a WAM
    }
}

public class RequireAuthenticationFilter : AuthorizeAttribute
{
    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
    {
        if (!filterContext.HttpContext.User.Identity.IsAuthenticated)
        {
            AuthHelper.RedirectToWAM(); // Redirige a WAM si el usuario no está autenticado
        }
        else
        {
            base.HandleUnauthorizedRequest(filterContext);
        }
    }
}

public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        filters.Add(new RequireAuthenticationFilter()); // Aplica autenticación a toda la app
        filters.Add(new HandleErrorAttribute());
    }
}

public static void RedirectToWAM()
{
    try
    {
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Redirect(redirectUri, true);
        HttpContext.Current.ApplicationInstance.CompleteRequest();
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirección a WAM: " + ex.Message);
    }
}
