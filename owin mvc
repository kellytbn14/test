using System.Diagnostics;
using System.Security.Claims;
using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var context = HttpContext.Current;
            var user = context.User;
            var requestPath = context.Request.Path;

            Debug.WriteLine("====== USER INFO ======");
            Debug.WriteLine($"IsAuthenticated: {user?.Identity?.IsAuthenticated}");
            Debug.WriteLine($"Current URL: {context.Request.Url}");

            // ðŸ”¹ Evita redirigir si estamos en el callback de autenticaciÃ³n
            if (requestPath.StartsWith("/signin-oidc", System.StringComparison.OrdinalIgnoreCase))
            {
                Debug.WriteLine("ðŸŸ¢ Callback de OIDC detectado. No redirigir.");
                return;
            }

            // ðŸ”¹ Si el usuario ya estÃ¡ autenticado, no hacemos nada
            if (user != null && user.Identity.IsAuthenticated)
            {
                Debug.WriteLine("âœ… Usuario autenticado. Continuando...");
                return;
            }

            Debug.WriteLine("ðŸ”´ Usuario no autenticado.");

            // ðŸ”¹ Si ya intentÃ³ autenticarse y sigue sin Ã©xito, evitar loop
            if (context.Session["AuthAttempt"] != null)
            {
                Debug.WriteLine("ðŸ”„ Se detectÃ³ un loop de autenticaciÃ³n. Mostrando error.");
                filterContext.Result = new RedirectResult("/Account/LoginError");
                return;
            }

            // ðŸ”¹ Guardar en sesiÃ³n que estamos intentando autenticarnos
            context.Session["AuthAttempt"] = "true";

            // ðŸ”¹ Redirigir al login
            Debug.WriteLine("ðŸ”¹ Redirigiendo a login...");
            context.GetOwinContext().Authentication.Challenge(
                new AuthenticationProperties { RedirectUri = context.Request.Url.ToString() },
                OpenIdConnectAuthenticationDefaults.AuthenticationType
            );

            filterContext.Result = new HttpUnauthorizedResult();
        }
    }
}



app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    ExpireTimeSpan = System.TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always,
    CookieSameSite = SameSiteMode.Lax
});


public override void OnActionExecuting(ActionExecutingContext filterContext)
{
    var requestPath = HttpContext.Current.Request.Path;

    // No ejecutar autenticaciÃ³n en la pÃ¡gina de retorno de OIDC
    if (requestPath.StartsWith("/signin-oidc", System.StringComparison.OrdinalIgnoreCase))
    {
        return;
    }

    var user = HttpContext.Current.User;

    Debug.WriteLine($"IsAuthenticated: {user?.Identity?.IsAuthenticated}");
    
    if (user == null || !user.Identity.IsAuthenticated)
    {
        Debug.WriteLine("ðŸ”´ Usuario no autenticado. Redirigiendo a login...");
        
        HttpContext.Current.GetOwinContext().Authentication.Challenge(
            new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
            OpenIdConnectAuthenticationDefaults.AuthenticationType
        );

        filterContext.Result = new HttpUnauthorizedResult();
    }
}



using System.Diagnostics;
using System.Security.Claims;
using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var user = HttpContext.Current.User;

            // ðŸ”¹ Ver informaciÃ³n del usuario en la consola de Debug
            Debug.WriteLine("====== USER INFO ======");
            if (user != null)
            {
                Debug.WriteLine($"IsAuthenticated: {user.Identity.IsAuthenticated}");
                Debug.WriteLine($"Authentication Type: {user.Identity.AuthenticationType}");
                Debug.WriteLine($"Name: {user.Identity.Name}");

                var claimsIdentity = user.Identity as ClaimsIdentity;
                if (claimsIdentity != null)
                {
                    foreach (var claim in claimsIdentity.Claims)
                    {
                        Debug.WriteLine($"Claim: {claim.Type} - {claim.Value}");
                    }
                }
            }
            else
            {
                Debug.WriteLine("User is NULL!");
            }
            Debug.WriteLine("======================");

            // ðŸ”¹ Si el usuario no estÃ¡ autenticado, redirigir al login
            if (user == null || !user.Identity.IsAuthenticated)
            {
                Debug.WriteLine("ðŸ”´ Usuario no autenticado. Redirigiendo a login...");

                HttpContext.Current.GetOwinContext().Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                filterContext.Result = new HttpUnauthorizedResult();
            }
        }
    }
}




using Microsoft.Owin;
using Owin;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OpenIdConnect;
using Microsoft.IdentityModel.Tokens;
using System.Threading.Tasks;
using System.Configuration;
using System.Web.Helpers;

[assembly: OwinStartup(typeof(MyMvcApp.Startup))]

namespace MyMvcApp
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // ðŸ”¹ 1. Configurar autenticaciÃ³n basada en cookies
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
                ExpireTimeSpan = System.TimeSpan.FromMinutes(60),
                SlidingExpiration = true
            });

            // ðŸ”¹ 2. Configurar OpenID Connect para autenticaciÃ³n automÃ¡tica
            app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
            {
                ClientId = ConfigurationManager.AppSettings["OIDC:ClientId"],
                Authority = ConfigurationManager.AppSettings["OIDC:Authority"],
                RedirectUri = ConfigurationManager.AppSettings["OIDC:RedirectUri"],
                ResponseType = "id_token",
                Scope = "openid profile email",
                SaveTokens = true,

                TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidAudience = ConfigurationManager.AppSettings["OIDC:ClientId"]
                },

                Notifications = new OpenIdConnectAuthenticationNotifications
                {
                    AuthenticationFailed = context =>
                    {
                        context.HandleResponse();
                        context.Response.Redirect("/Error?message=" + context.Exception.Message);
                        return Task.FromResult(0);
                    }
                }
            });

            // ðŸ”¹ 3. Evitar problemas con antiforgery tokens en OWIN
            AntiForgeryConfig.UniqueClaimTypeIdentifier = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
        }
    }
}

using System.Web;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.OpenIdConnect;

namespace MyMvcApp.Filters
{
    public class AutoLoginFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var user = HttpContext.Current.User;
            
            if (user == null || !user.Identity.IsAuthenticated)
            {
                // ðŸ”¹ Redirigir automÃ¡ticamente al login si el usuario no estÃ¡ autenticado
                HttpContext.Current.GetOwinContext().Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = HttpContext.Current.Request.Url.ToString() },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                // ðŸ”¹ Detener la ejecuciÃ³n de la acciÃ³n actual
                filterContext.Result = new HttpUnauthorizedResult();
            }
        }
    }
}

using System.Web.Mvc;
using MyMvcApp.Filters;

namespace MyMvcApp.Controllers
{
    [AutoLoginFilter]  // âœ… Aplica el filtro de autenticaciÃ³n automÃ¡tica
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }
    }
}















app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
{
    ClientId = AuthProperties.ClientId,
    ClientSecret = AuthProperties.ClientSecret,
    Authority = AuthProperties.BaseUrl,
    RedirectUri = AuthProperties.RedirectUri,
    CookieManager = new SystemWebCookieManager(),
    SaveTokens = true, // <--- Guarda los tokens en la sesiÃ³n de autenticaciÃ³n
    Notifications = new OpenIdConnectAuthenticationNotifications
    {
        AuthenticationFailed = OnAuthenticationFailed,
        SecurityTokenValidated = OnSecurityTokenValidated
    }
});

private static async Task OnSecurityTokenValidated(SecurityTokenValidatedNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
{
    var identity = context.AuthenticationTicket.Identity;
    
    // Puedes agregar claims personalizados si es necesario
    identity.AddClaim(new System.Security.Claims.Claim("id_token", context.ProtocolMessage.IdToken));

    context.AuthenticationTicket = new AuthenticationTicket(identity, context.AuthenticationTicket.Properties);
}


app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
    LoginPath = new PathString("/Account/Login"),
    ExpireTimeSpan = TimeSpan.FromMinutes(60),
    SlidingExpiration = true,
    CookieSameSite = SameSiteMode.Lax, // Ajusta esto si hay problemas con cookies en navegadores modernos
    CookieHttpOnly = true,
    CookieSecure = CookieSecureOption.Always
});


public static void UseAuthenticationMiddleware(IAppBuilder app)
{
    app.Use(async (context, next) =>
    {
        var owinContext = context.Get<IOwinContext>();
        var user = owinContext.Authentication.User;
        bool isAuthenticated = user?.Identity != null && user.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            // Solo desafÃ­a si no estamos ya en un intento de autenticaciÃ³n
            if (!context.Request.Path.Value.Contains("/signin-oidc"))
            {
                owinContext.Authentication.Challenge(
                    new AuthenticationProperties { RedirectUri = AuthProperties.RedirectUri },
                    OpenIdConnectAuthenticationDefaults.AuthenticationType
                );

                context.Response.StatusCode = 401;
                return;
            }
        }

        await next();
    });
}









public static class AuthConfig
{
    public static void ConfigureAuth(IAppBuilder app, string clientId, string clientSecret, string baseUrl, string redirectUri)
    {
        AuthProperties.ClientId = clientId;
        AuthProperties.ClientSecret = clientSecret;
        AuthProperties.BaseUrl = baseUrl;
        AuthProperties.RedirectUri = redirectUri;

        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = AuthProperties.ClientId,
            ClientSecret = AuthProperties.ClientSecret,
            Authority = AuthProperties.BaseUrl,
            RedirectUri = AuthProperties.RedirectUri,
            ResponseType = OpenIdConnectResponseType.CodeIdToken,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }

    public static void UseAuthenticationMiddleware(IAppBuilder app)
    {
        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });
    }
}



public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            AuthenticationType = CookieAuthenticationDefaults.AuthenticationType,
            CookieSameSite = SameSiteMode.None
        });

        app.Use(async (context, next) =>
        {
            if (!context.Authentication.User.Identity.IsAuthenticated)
            {
                string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

                context.Authentication.Challenge(new AuthenticationProperties
                {
                    RedirectUri = redirectUri
                }, OpenIdConnectAuthenticationDefaults.AuthenticationType);

                context.Response.StatusCode = 401;
                return;
            }

            await next();
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = "tu-client-id",
            Authority = "https://tu-idp.com",
            RedirectUri = "https://tuapp.com/signin-oidc",
            ResponseType = "code id_token",
            UseTokenLifetime = true,
            SignInAsAuthenticationType = CookieAuthenticationDefaults.AuthenticationType
        });
    }
}



protected void Application_BeginRequest(object sender, EventArgs e)
{
    try
    {
        if (!(HttpContext.Current.User?.Identity?.IsAuthenticated ?? false)) // Verifica autenticaciÃ³n correctamente
        {
            string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

            // Redirigir manualmente a WAM sin usar OWIN
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.Redirect(redirectUri, true);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirecciÃ³n a WAM: " + ex.Message);
    }
}


protected void Application_PostAuthenticateRequest(object sender, EventArgs e)
{
    var owinContext = HttpContext.Current.GetOwinContext();
    if (owinContext.Authentication.User != null && owinContext.Authentication.User.Identity.IsAuthenticated)
    {
        HttpContext.Current.User = owinContext.Authentication.User;
    }
}

protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User?.Identity?.IsAuthenticated ?? true)
    {
        // NO reemplazar HttpContext.User aquÃ­, solo redirigir si es necesario
        AuthHelper.RedirectToWAM();
    }
}


protected void Application_BeginRequest(object sender, EventArgs e)
{
    if (!HttpContext.Current.User.Identity.IsAuthenticated)
    {
        AuthHelper.RedirectToWAM(); // Llama a tu mÃ©todo que redirige a WAM
    }
}

public class RequireAuthenticationFilter : AuthorizeAttribute
{
    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
    {
        if (!filterContext.HttpContext.User.Identity.IsAuthenticated)
        {
            AuthHelper.RedirectToWAM(); // Redirige a WAM si el usuario no estÃ¡ autenticado
        }
        else
        {
            base.HandleUnauthorizedRequest(filterContext);
        }
    }
}

public class FilterConfig
{
    public static void RegisterGlobalFilters(GlobalFilterCollection filters)
    {
        filters.Add(new RequireAuthenticationFilter()); // Aplica autenticaciÃ³n a toda la app
        filters.Add(new HandleErrorAttribute());
    }
}

public static void RedirectToWAM()
{
    try
    {
        string redirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Redirect(redirectUri, true);
        HttpContext.Current.ApplicationInstance.CompleteRequest();
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Error en la redirecciÃ³n a WAM: " + ex.Message);
    }
}
