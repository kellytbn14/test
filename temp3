using Serilog;

public static class LoggerFactory
{
    public static readonly ILogger Logger;

    static LoggerFactory()
    {
        Logger = new LoggerConfiguration()
            .WriteTo.File("C:\\Logs\\mibiblioteca-log.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();
    }
}



using System;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace OidcAuthLib
{
    public class AuthHelper
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public AuthHelper(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));
        }

        public async Task AuthenticateUser()
        {
            var httpContext = _httpContextAccessor.HttpContext;

            if (httpContext == null) return;

            if (!httpContext.User.Identity.IsAuthenticated)
            {
                await RedirectToLogin();
                return;
            }

            var identity = (ClaimsIdentity)httpContext.User.Identity;
            var idTokenClaim = identity.FindFirst("id_token");

            string userName = identity.Name;
            string email = identity.FindFirst(ClaimTypes.Email)?.Value;
            string userId = identity.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            string role = identity.FindFirst(ClaimTypes.Role)?.Value;

            if (idTokenClaim != null)
            {
                string idToken = idTokenClaim.Value;
            }
        }

        public async Task RedirectToLogin()
        {
            var httpContext = _httpContextAccessor.HttpContext;

            if (httpContext == null) return;

            var redirectUri = "/"; // Define tu RedirectUri

            await httpContext.ChallengeAsync(OpenIdConnectDefaults.AuthenticationScheme,
                new AuthenticationProperties { RedirectUri = redirectUri });

            httpContext.Response.StatusCode = 401;
        }
    }

    public static class AuthServiceExtensions
    {
        public static void AddAuthServices(this IServiceCollection services)
        {
            services.AddHttpContextAccessor();
            services.AddScoped<AuthHelper>();
        }
    }
}



using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;

namespace OidcAuthLib
{
    public static class AuthConfig
    {
        public static void ConfigureAuth(IServiceCollection services, string clientId, string clientSecret, string authority, string redirectUri)
        {
            services.AddAuthentication(options =>
            {
                options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
            })
            .AddCookie(options =>
            {
                options.Cookie.SameSite = SameSiteMode.None;
            })
            .AddOpenIdConnect(options =>
            {
                options.ClientId = clientId;
                options.ClientSecret = clientSecret;
                options.Authority = authority;
                options.CallbackPath = new PathString(redirectUri);
                options.ResponseType = OpenIdConnectResponseType.Code;
                options.Events = new OpenIdConnectEvents
                {
                    OnRemoteFailure = OnAuthenticationFailed
                };
            });
        }

        public static void ConfigureApp(IApplicationBuilder app)
        {
            app.UseAuthentication();
            app.UseAuthorization();
        }

        private static Task OnAuthenticationFailed(RemoteFailureContext context)
        {
            context.HandleResponse();
            context.Response.Redirect("/error?message=" + Uri.EscapeDataString(context.Failure.Message));
            return Task.CompletedTask;
        }
    }
}
