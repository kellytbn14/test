/// <summary>
/// Provides access to secret configuration values stored in Azure Key Vault (AKV).
/// Implements lazy initialization to ensure secrets are loaded only once and on demand.
/// 
/// Secrets retrieved include:
/// - Client IDs and secrets for HRAPI and WAM authentication flows
/// - The HRAPI private key in PEM format
/// 
/// Secrets are retrieved via CryptoManager and decoded if necessary (e.g., PEM key in Base64).
/// Logging is used to trace secret loading operations and detect failures.
/// </summary>


/// <summary>
/// Custom OWIN middleware that logs incoming HTTP requests and outgoing HTTP responses.
/// Captures method, URI, headers, and response status for troubleshooting and auditing purposes.
/// Uses a structured logging helper (LogHelper) to record debug-level logs.
/// </summary>

    /// <summary>
    /// Initializes a new instance of the <see cref="LoggingMiddleware"/> class.
    /// </summary>
    /// <param name="next">The next middleware component in the OWIN pipeline.</param>




    /// <summary>
    /// Processes an incoming HTTP request and an outgoing HTTP response.
    /// Logs request method, URI, request headers, response status code, and response headers.
    /// </summary>
    /// <param name="context">The OWIN context containing the HTTP request and response information.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>





/// <summary>
/// Provides a helper utility for structured logging using Serilog.
/// Defines log levels and formats log messages consistently across the application.
/// </summary>



    /// <summary>
    /// Defines the available log severity levels for application logging.
    /// </summary>



    /// <summary>
    /// Logs a formatted message to Serilog based on the specified log level.
    /// The message includes optional environment and identifier information for better traceability.
    /// </summary>
    /// <param name="message">The main log message to be recorded.</param>
    /// <param name="environment">Optional. The environment or context where the log is generated (e.g., Development, Production).</param>
    /// <param name="id">Optional. An identifier associated with the log entry, such as a request ID or operation ID.</param>
    /// <param name="level">The severity level of the log. Defaults to Informational if not specified.</param>



/// <summary>
/// Retrieves basic employee information from the database based on the provided employee ID (empid).
/// Connects to the appropriate environment-specific database, executes a query against the LWS_Emp_Basic table,
/// and maps selected fields into an <see cref="Empinfo"/> object.
/// 
/// In case of a database connection or query error, writes an error message to the response and terminates the request.
/// </summary>
/// <param name="empid">The employee ID (ScotiaID) used to search for the employee's information in the database.</param>
/// <returns>
/// An <see cref="Empinfo"/> object containing selected employee details, or null if no record is found or an error occurs.
/// </returns>


/// <summary>
/// Validates that the employee token (TokenEmpinfo) contains the required employee identifier (Sub).
/// If the identifier is missing, sends an error message to the client and terminates the response.
/// </summary>


/// <summary>
/// Validates that the retrieved employee information from HRAPI is not null and contains a valid employee number.
/// If validation fails, sends an error message to the client and terminates the response.
/// </summary>
/// <param name="empinfo">The employee information response object to validate.</param>

/// <summary>
/// Determines the language code based on the employee's preferred language.
/// Defaults to English if the preferred language is not set or unrecognized.
/// </summary>
/// <param name="empPreferredLanguage">The employee's preferred language as a string.</param>
/// <returns>
/// A language code string (e.g., "en" for English or "fr" for French).
/// </returns>


/// <summary>
/// Retrieves employee information from the HRAPI service.
/// 
/// Initializes and configures HRAPI client properties from AppSettings and Azure Key Vault.
/// Validates the access token before making the API call and ensures the received employee data is valid.
/// 
/// In case of any failure during the process, logs the error and returns a user-friendly message
/// to the client, terminating the response.
/// </summary>
/// <returns>
/// An <see cref="EmpinfoHRApiResponse"/> object containing the employee information,
/// or null if an error occurs.
/// </returns>


/// <summary>
/// Handles the BeginRequest event for each incoming HTTP request.
/// Based on the request URL, dynamically updates the authentication redirect URI
/// used in the OAuth/OpenID Connect flow to point to the correct WAM (Web Access Manager) endpoint.
/// 
/// Reads route prefixes and redirect URIs from AppSettings configuration.
/// This logic ensures the application redirects users to the appropriate authentication flow
/// depending on the access path (e.g., HR Passport or Scotiaworld).
/// </summary>
/// <param name="sender">The source of the event.</param>
/// <param name="e">The EventArgs instance containing the event data.</param>
protected void Application_BeginRequest(object sender, EventArgs e)
{
    var context = HttpContext.Current;
    string path = context?.Request?.Url?.ToString();

    if (path != null)
    {
        string appRoutePrefixHRPassport = ConfigurationManager.AppSettings["AppRoute_Prefix_HRPassport"];
        string appRoutePrefixScotiaworld = ConfigurationManager.AppSettings["AppRoute_Prefix_Scotiaworld"];
        string wamRedirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];
        string wamScotiaWorldRedirectUri = ConfigurationManager.AppSettings["WamScotiaWorldRedirectUri"];

        if (path.Contains(appRoutePrefixHRPassport))
        {
            AuthProperties.RedirectUri = wamRedirectUri;
        }
        else if (path.Contains(appRoutePrefixScotiaworld))
        {
            AuthProperties.RedirectUri = wamScotiaWorldRedirectUri;
        }
    }
}


/// <summary>
    /// Startup class responsible for configuring the authentication pipeline for the application.
    /// Initializes logging, retrieves configuration values, fetches secrets from Azure Key Vault,
    /// and sets up OAuth and OpenID Connect authentication by redirecting users to WAM (Web Access Manager).
    /// </summary>


/// <summary>
        /// Configures the OWIN middleware pipeline.
        /// This includes setting up Serilog for logging, fetching authentication secrets from Key Vault,
        /// and configuring OAuth/OIDC authentication through the external WAM provider.
        /// 
        /// It uses ASP.NET OWIN libraries to implement cookie-based authentication as part of the OAuth/OpenID Connect flow.
        /// </summary>
        /// <param name="app">The OWIN application builder used to configure middleware components.</param>


pero es que, el problema real es que la cookie no está quedando seteada, no es que el token no llegue no es nada de eso, en local la cookie sí se guarda, pero en iis no. en local funciona por el requireSSL = true, pongo eso en iis y no funciona. entonces el problema es por otro lado. ayudame investigando y analizando a fondo, por el lado de iis, porque si en local me funciona, es porque en el servidor falta algo, o hay algo relacionado con el codigo

Calificación: 5

Durante el año, completé el plan de competencias básicas asignadas por el sistema y lo envié dentro del plazo solicitado. Además, añadí dos competencias adicionales para fortalecer mis habilidades y seguir desarrollándome en mi rol. Considero importante mantenerme actualizado y alineado con las expectativas del área, por eso me esfuerzo en cumplir con estos requerimientos de manera proactiva.

Calificación: 5

Aunque no he recibido feedback directo por parte del cliente, durante el año no se ha presentado ninguna percepción negativa sobre mi trabajo. Esto me indica que el cliente está satisfecho con los resultados y el servicio que he brindado. Siempre he procurado mantener un desempeño constante y de calidad, lo que contribuye a una percepción positiva del 100% en los aspectos evaluados.

Technical Skills:

Full-Stack Web Development

Application Security

OAuth 2.0 / OIDC

Authentication & Authorization

RESTful API Development

JavaScript / TypeScript

HTML5 / CSS3

Angular / React / Vue.js (según el framework que uses)

.NET Framework / .NET Core

C#

SQL / Entity Framework

DevOps Basics (CI/CD, Git, Azure DevOps)

Secure Coding Practices

Identity and Access Management (IAM)

Soft Skills:

Problem Solving

Communication

Teamwork

Attention to Detail

Adaptability

Analytical Thinking

As a full-stack developer on the GBS Scotiabank T&M project, I’m responsible for implementing security features in corporate applications. My work ensures robust protection across platforms, contributing to secure, scalable, and high-performance software solutions.


**Calificación: 4**  

He cumplido con el reporte oportuno de la información solicitada dentro de los procesos internos de TCS, manteniéndome pendiente de las solicitudes y asegurando la actualización de novedades, especialmente en lo referente a tiempos y horas trabajadas. Siempre procuro ser organizado y cumplir con estos requerimientos de manera eficiente para evitar retrasos o inconvenientes en la gestión del equipo.

**Calificación: 3**  

Durante el año evaluado, no he recibido comentarios negativos por parte del cliente. He mantenido un desempeño estable y, en caso de haber estado en un proceso de mejora, logré superar las expectativas y aumentar mi eficiencia en el servicio. Mi objetivo siempre ha sido brindar un trabajo de calidad y asegurar la satisfacción del cliente.

**Calificación: 5**  

A lo largo del año, me he esforzado en ir más allá de los cursos mandatorios, completando cinco o más entrenamientos adicionales que han fortalecido mis habilidades. Me gusta seguir aprendiendo y actualizándome para mejorar en mi rol y aportar más al equipo. Creo que este compromiso con el aprendizaje continuo refleja mi interés en crecer profesionalmente y dar siempre lo mejor de mí.

Set-ExecutionPolicy RemoteSigned


Crypto-PGP CLI is a tool for encrypting and decrypting text using PGP Core. It also allows storing and retrieving credentials from Windows Credential Manager (WCM).


feat(auth): Configure OWIN authentication middleware with OIDC and cookies  

- Implemented OWIN authentication pipeline using OpenID Connect (OIDC).  
- Added `UseCookieAuthentication` to manage user sessions with cookies.  
- Configured `LoginPath` to `/Auth/Login.aspx` for redirecting unauthenticated users.  
- Set `ExpireTimeSpan` to 30 minutes to enhance session security.  
- Ensured `SignInAsAuthenticationType` is properly set to prevent OWIN middleware order issues.  

This update improves authentication flow by integrating OIDC with cookie-based authentication in the OWIN pipeline.  

Today, I’m continuing the OIDC implementation in ESOP. I’ll probably deploy to the development environment today for testing.

https://docs.google.com/document/d/1__0lsM1RITsn4uEozqG1CXpyOZuC15NeeptW74G8-sc/edit?usp=sharing
