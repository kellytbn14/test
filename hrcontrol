private static void focusLastEditableRow(int lastPage) {
    PrimeFaces.current().ajax().update("tableForm:genericTable");

    PrimeFaces.current().executeScript(
        "var dt = PF('genericTable');" +
        "dt.getPaginator().setPage(" + lastPage + ");" +
        "setTimeout(function() {" +
            // Activar edición por índice real (última fila en el modelo, no en la vista ordenada)
            "var lastIndex = dt.getRowsCount() - 1;" +
            "dt.startRowEdit(lastIndex);" +

            // Enfocar el primer input de esa fila
            "var row = dt.tbody.children().eq(lastIndex);" +
            "row.find('.ui-inputfield:first').trigger('focus');" +
        "}, 500);"
    );
}


PrimeFaces.current().executeScript(
    "$('#tableForm\\\\:addNewRowButton').prop('disabled', true);"
);
PrimeFaces.current().executeScript(
    "$('#tableForm\\\\:addNewRowButton').prop('disabled', false);"
);



PrimeFaces.current().executeScript(
    "setTimeout(function() {" +
    "  var btn = document.getElementById('tableForm:addRowBtn');" +
    "  if (btn) btn.disabled = true;" +
    "}, 100);"
);





PrimeFaces.current().executeScript("document.getElementById('tableForm:addRowBtn').disabled = false;");


PrimeFaces.current().executeScript("""
    var $editingRow = $('.ui-datatable-data > tr.ui-row-editing');
    var $allRows = $('.ui-datatable-data > tr');

    $allRows.not($editingRow).find('.ui-row-editor-pencil').each(function() {
        $(this).css('pointer-events', 'none').css('opacity', '0.3');
    });
""");


PrimeFaces.current().executeScript("""
    $('.ui-row-editor-pencil').css('pointer-events', 'auto').css('opacity', '1');
""");



PrimeFaces.current().executeScript(
    """
    var $currentRow = $('.ui-datatable-data > tr.ui-row-editing');
    var $otherRows = $('.ui-datatable-data > tr').not('.ui-row-editing');

    $otherRows.find('.ui-row-editor-init').each(function() {
        $(this).addClass('ui-state-disabled').attr('disabled', 'disabled');
    });
    """
);
PrimeFaces.current().executeScript(
    "$('.ui-row-editor-init').removeClass('ui-state-disabled').removeAttr('disabled');"
);








var $currentRow = $('.ui-datatable-data > tr.ui-row-editing');
var $otherRows = $('.ui-datatable-data > tr').not('.ui-row-editing');

$otherRows.find('.ui-row-editor-init').each(function() {
    $(this).addClass('ui-state-disabled').attr('disabled', 'disabled');
});


$('.ui-row-editor-init').removeClass('ui-state-disabled').removeAttr('disabled');


public void onRowEditInit(RowEditEvent<T> event) {
    PrimeFaces.current().executeScript("""
        $('.ui-row-editor-init').not('.ui-state-disabled').addClass('ui-state-disabled').prop('disabled', true);
    """);
}

public void onRowEdit(RowEditEvent<T> event) {
    PrimeFaces.current().executeScript("""
        $('.ui-row-editor-init').removeClass('ui-state-disabled').prop('disabled', false);
    """);
    // ... tu lógica de guardado
}

public void onRowCancel(RowEditEvent<T> event) {
    PrimeFaces.current().executeScript("""
        $('.ui-row-editor-init').removeClass('ui-state-disabled').prop('disabled', false);
    """);
    // ... tu lógica de cancelación
}


<p:ajax event="rowEditInit" listener="#{bean.onRowEditInit}" process="@this" update="@none" />

<!-- Si es nueva fila, usa un input genérico y seguro -->
            <h:panelGroup rendered="#{genericCrudBean.isNewRow(item)}">
                <p:inputText value="#{item[col.property]}" style="width:100%" />
            </h:panelGroup>

            <!-- Si es fila existente, usa el input normal -->
            <h:panelGroup rendered="#{!genericCrudBean.isNewRow(item)}">
                <p:inputText value="#{item[col.property]}" style="width:100%" />
            </h:panelGroup>



<p:inputText value="#{genericCrudBean.getPropertyValue(item, col.property)}"
             readonly="#{!col.editable}"
             style="width:100%">
    <f:attribute name="propertyName" value="#{col.property}"/>
</p:inputText>

public Object getPropertyValue(Object item, String propertyName) {
    try {
        PropertyDescriptor pd = new PropertyDescriptor(propertyName, item.getClass());
        return pd.getReadMethod().invoke(item);
    } catch (Exception e) {
        logger.error("Error reading property '{}' from item", propertyName, e);
        return null;
    }
}

public void setPropertyValue(Object item, String propertyName, Object value) {
    try {
        PropertyDescriptor pd = new PropertyDescriptor(propertyName, item.getClass());
        pd.getWriteMethod().invoke(item, value);
    } catch (Exception e) {
        logger.error("Error setting property '{}' to item", propertyName, e);
    }
}










var dt = PF('genericTable');
dt.getPaginator().setPage(#{genericCrudBean.lastPage});
setTimeout(function(){
  var $last = dt.getTbody().children('tr.ui-widget-content:visible:last');
  if (dt.showRowEditors)      dt.showRowEditors($last);
  else if (dt.switchToRowEdit) dt.switchToRowEdit($last);
  else {
    var $btn = $last.find('.ui-row-editor .ui-row-editor-init,[data-pf-roweditor-init],.ui-row-editor .ui-icon-pencil').first();
    if ($btn.length) $btn.trigger('click');
  }
  $last.find('.ui-inputfield:first').trigger('focus');
}, 0);



public void onAddNewRow() {
    try {
        Class<?> entityClass = sessionContext.getEntityClass();
        T newItem = (T) entityClass.getDeclaredConstructor().newInstance();

        // Inicializa lo que necesites; por defecto, los campos quedan null
        items.add(newItem);

        if (tableComponent != null) {
            currentRowsPerPage = tableComponent.getRows();
        }
        lastPage = (items.size() - 1) / currentRowsPerPage;

        // Importante: NO ejecutes aquí scripts de paginación/edición.
        // Solo actualiza la tabla.
        PrimeFaces.current().ajax().update("tableForm:genericTable");

    } catch (Exception e) {
        logger.error("Error creating empty row", e);
        addMessage(FacesMessage.SEVERITY_ERROR, "ERROR", "Could not add empty row");
    }
}

<p:commandButton icon="pi pi-plus-circle"
    styleClass="ui-button-outlined ui-button-secondary button-search"
    action="#{genericCrudBean.onAddNewRow}"
    process="@this"
    value="Add new row"
    update="genericTable"
    oncomplete="
      (function(){
        var dt = PF('genericTable');
        // Ir a la última página calculada en el servidor
        dt.getPaginator().setPage(#{genericCrudBean.lastPage});

        // Espera a que se re-renderice el tbody de esa página y entra en edición
        setTimeout(function(){
          var $last = dt.getTbody().children('tr.ui-widget-content:visible:last');
          dt.switchToRowEdit($last);
          $last.find('.ui-inputfield:first').trigger('focus');
        }, 0);
      })();
    "
/>







public void onAddNewRow() {
    try {
        Class<?> entityClass = sessionContext.getEntityClass();
        T newItem = (T) entityClass.getDeclaredConstructor().newInstance();

        // (opcional) inicializa campos que deban tener valor por defecto
        items.add(newItem);

        if (tableComponent != null) {
            currentRowsPerPage = tableComponent.getRows();
        }
        lastPage = (items.size() - 1) / currentRowsPerPage;

        PrimeFaces.current().ajax().update("tableForm:genericTable"); // asegúrate de actualizar la tabla
        PrimeFaces.current().executeScript(
            "var dt = PF('genericTable');" +
            "dt.getPaginator().setPage(" + lastPage + ");" +
            "dt.addRow();" + // trae el último row del backend y lo inserta
            "var $last = dt.getTbody().children('tr:last');" +
            "dt.switchToRowEdit($last);" +
            "$last.find('.ui-inputfield:first').trigger('focus');"
        );

    } catch (Exception e) {
        logger.error("Error creating empty row", e);
        addMessage(FacesMessage.SEVERITY_ERROR, "ERROR", "Could not add empty row");
    }
}


<p:commandButton icon="pi pi-plus-circle"
    styleClass="ui-button-outlined ui-button-secondary button-search"
    action="#{genericCrudBean.onAddNewRow}"
    process="@this"
    value="Add new row"
    update="genericTable"
    oncomplete="
      (function(){
        var dt = PF('genericTable');
        // si ya navegas a la última página desde el bean, no lo repitas aquí
        dt.addRow(); // inserta el último row del backend en el DOM
        var $last = dt.getTbody().children('tr:last'); // última fila visible
        dt.switchToRowEdit($last); // activa los inputs de esa fila
        $last.find('.ui-inputfield:first').trigger('focus'); // opcional
      })();
    "
/>













// Actualizar tabla y redirigir a la última página
        PrimeFaces.current().ajax().update("tableForm:genericTable");

        // Activar edición automáticamente en la nueva fila
        String widgetVar = "genericTable";
        int rowIndex = totalItems - 1;
        PrimeFaces.current().executeScript(String.format(
            "PF('%s').getPaginator().setPage(%d); " +
            "setTimeout(function() { PF('%s').showEditor(%d); }, 100);",
            widgetVar, lastPageIndex, widgetVar, rowIndex
        ));


RequestContext context = RequestContext.getCurrentInstance();
context.execute("PF('genericTable').getPaginator().setPage(" + lastPage + ");");

// Espera a que la tabla se renderice antes de activar edición (usa otro timeout si es necesario)
context.execute("setTimeout(function() { PF('genericTable').showRowEditor(" + lastRowIndex + "); }, 200);");



public void onAddNewRow() {
    try {
        Class<?> entityClass = sessionContext.getEntityClass();
        T newInstance = (T) entityClass.getDeclaredConstructor().newInstance();
        items.add(newInstance);

        int totalRows = items.size();
        int rowsPerPage = 10; // asegúrate que esto coincida con el valor del HTML o se obtenga dinámicamente
        int lastPage = (int) Math.ceil((double) totalRows / rowsPerPage) - 1;
        int rowIndexOnLastPage = (totalRows - 1) % rowsPerPage;

        PrimeFaces.current().executeScript(
            "setTimeout(function() {" +
                "var dt = PF('genericTable');" +
                "dt.getPaginator().setPage(" + lastPage + ");" +
                "setTimeout(function() { dt.showRowEditor(" + rowIndexOnLastPage + "); }, 200);" +
            "}, 100);"
        );

    } catch (Exception e) {
        logger.error("Error adding new row", e);
    }
}




<p:commandButton value="Add new row"
                 icon="pi pi-plus-circle"
                 action="#{genericCrudBean.onAddNewRow}"
                 process="@this"
                 update="tableForm:genericTable"
                 oncomplete="goToLastPage()" />


<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui">

<f:view transient="false">
  <ui:composition template="/sites/template.xhtml">
    ...
  </ui:composition>
</f:view>
</html>

<h:outputScript>
    function goToLastPage() {
        setTimeout(function () {
            var table = PF('genericTable');
            if (table) {
                table.getPaginator().setPage(table.getPaginator().getPageCount() - 1);
            }
        }, 250);
    }
</h:outputScript>
















<p:commandButton value="Add new row"
                 icon="pi pi-plus-circle"
                 styleClass="ui-button-outlined ui-button-secondary button-search"
                 process="@this"
                 update="tableForm:genericTable"
                 action="#{genericCrudBean.onAddNewRow}"
                 oncomplete="setTimeout(function() {
                     var table = PF('genericTable');
                     if (table) {
                         table.getPaginator().setPage(table.getPaginator().getPageCount() - 1);
                     }
                 }, 250);"/>


oncomplete="setTimeout(function() {
                     var table = PF('genericTable');
                     var paginator = table.getPaginator();
                     paginator.setPage(paginator.getPageCount() - 1);
                 }, 100);"

<p:ajax event="page" listener="#{genericCrudBean.onPageChange}" update="@none"/>
    <p:ajax event="rowsPerPage" listener="#{genericCrudBean.onRowsChange}" update="@none"/>

public void onPageChange() {
    // no se necesita nada aquí, pero se puede usar si quieres guardar la página actual
}

public void onRowsChange() {
    // este se dispara cuando cambia el "Rows per page"
    // puedes usarlo para debug si quieres
    logger.info("Rows per page changed to: {}", rowsPerPage);
}




oncomplete="setTimeout(function() {
    PF('genericTable').getPaginator().setPage(#{genericCrudBean.lastPageToNavigate});
}, 100);"









<p:commandButton icon="pi pi-plus-circle"
                 styleClass="ui-button-outlined ui-button-secondary button-search"
                 action="#{genericCrudBean.onAddNewRow}"
                 process="@this"
                 update="genericTable"
                 value="Add new row"
                 oncomplete="PF('genericTable').getPaginator().setPage(#{genericCrudBean.lastPageToNavigate})"/>


<p:ajax event="page" listener="#{genericCrudBean.onPageChange}" />

public void onPageChange(PageEvent event) {
    if (tableComponent instanceof UIData dataTable) {
        currentRowsPerPage = dataTable.getRows();
    }
}


private int lastPageToNavigate = -1;

public int getLastPageToNavigate() {
    return lastPageToNavigate;
}

public void setLastPageToNavigate(int lastPageToNavigate) {
    this.lastPageToNavigate = lastPageToNavigate;
}

public void onAddNewRow() {
    T newItem = createNewItem(); // lógica tuya
    items.add(newItem);

    // Calcula última página (items.size() - 1) / rowsPorPagina
    int rowsPerPage = 10; // asegúrate que coincida con tu <p:dataTable rows="10">
    lastPageToNavigate = (items.size() - 1) / rowsPerPage;
}


<p:commandButton icon="pi pi-plus-circle"
                 styleClass="ui-button-outlined ui-button-secondary button-search"
                 action="#{genericCrudBean.onAddNewRow}"
                 process="@this"
                 value="Add new row"
                 update="genericTable"
                 oncomplete="if (#{genericCrudBean.lastPageToNavigate} >= 0) PF('genericTable').getPaginator().setPage(#{genericCrudBean.lastPageToNavigate});" />



oncomplete="PF('genericTable').getPaginator().setPage(#{genericCrudBean.lastPageToNavigate});"


oncomplete="PF('genericTable').getPaginator().changePage(#{genericCrudBean.lastPageToNavigate});"









<p:dataTable id="genericTable"
             widgetVar="genericTable"
             ...
/>

<p:commandButton value="Agregar nueva fila"
                 action="#{genericCrudBean.addEmptyRow}"
                 process="@this"
                 update="genericTable"
                 oncomplete="PF('genericTable').getPaginator().setPage(PF('genericTable').getPaginator().getPageCount() - 1)" />




<p:commandButton value="Add Row"
                 icon="pi pi-plus"
                 action="#{genericCrudBean.addEmptyRow}"
                 process="@this"
                 update="genericTable" />
public void addEmptyRow() {
    try {
        Class<?> entityClass = sessionContext.getEntityClass();
        T newItem = (T) entityClass.getDeclaredConstructor().newInstance();

        // Inicializa con null o valores por defecto
        for (Field field : entityClass.getDeclaredFields()) {
            field.setAccessible(true);
            if (!Modifier.isFinal(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {
                field.set(newItem, null);
            }
        }

        items.add(newItem); // ya debe existir la lista "items" con getter/setter
    } catch (Exception e) {
        logger.error("Error creating empty row", e);
        addMessage(FacesMessage.SEVERITY_ERROR, "ERROR", "Could not add empty row");
    }
}

<p:ajax event="rowEdit" listener="#{genericCrudBean.onRowEdit}" update="@form" />


private Object convertToFieldType(Field field, Object value) {
    if (value == null) {
        return null;
    }

    Class<?> targetType = field.getType();

    // ✅ 1. Si ya es del tipo esperado, lo devolvemos tal cual
    if (targetType.isInstance(value)) {
        return value;
    }

    try {
        if (value instanceof String strValue) {
            strValue = strValue.replace(",", "").trim();

            if (targetType == BigDecimal.class) {
                return new BigDecimal(strValue);
            } else if (targetType == Double.class || targetType == double.class) {
                return Double.parseDouble(strValue);
            } else if (targetType == Float.class || targetType == float.class) {
                return Float.parseFloat(strValue);
            } else if (targetType == Long.class || targetType == long.class) {
                return Long.parseLong(strValue);
            } else if (targetType == Integer.class || targetType == int.class) {
                return Integer.parseInt(strValue);
            } else if (targetType == Short.class || targetType == short.class) {
                return Short.parseShort(strValue);
            } else if (targetType == Date.class) {
                // Intenta parsear desde formato ISO (ajústalo si usas otro formato)
                try {
                    LocalDate parsedDate = LocalDate.parse(strValue);
                    return Date.from(parsedDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
                } catch (DateTimeParseException e) {
                    logger.warn("Could not parse date string: {}", strValue);
                }
            }
        }

        // ✅ 2. Conversión desde LocalDate a Date
        if (value instanceof LocalDate localDate && targetType == Date.class) {
            return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        }

        // ✅ 3. Conversión desde LocalDateTime a Date
        if (value instanceof LocalDateTime localDateTime && targetType == Date.class) {
            return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
        }

    } catch (Exception e) {
        logger.warn("Could not convert value [{}] to type [{}] for field [{}]",
                value, targetType.getSimpleName(), field.getName());
    }

    // ⚠ fallback si no pudo convertir
    return value;
}






<p:messages id="message" closable="true" showDetail="true" showSummary="true" />

















public void onRowEdit(RowEditEvent<T> event) {
    T editedItem = event.getObject();
    resolver.save(editedItem); // Reutiliza tu lógica de guardado genérico
    addMessage(FacesMessage.SEVERITY_INFO, "Row Edited", "Changes saved");
}

public void onRowCancel(RowEditEvent<T> event) {
    addMessage(FacesMessage.SEVERITY_WARN, "Edit Cancelled", "No changes saved");
}






for (Field field : item.getClass().getDeclaredFields()) {
                field.setAccessible(true);
                MinLength minLength = field.getAnnotation(MinLength.class);

                if (minLength != null) {
                    Object value = field.get(item);

                    if (value instanceof String strValue && strValue.length() < minLength.value()) {
                        addMessage(FacesMessage.SEVERITY_ERROR, "Validation Error",
                                "El campo [" + field.getName() + "] debe tener mínimo " + minLength.value() + " caracteres");
                        return;
                    }
                }
            }













Field field = MyClass.class.getDeclaredField("audits");
Type genericType = field.getGenericType();

if (genericType instanceof ParameterizedType pt) {
    Type elementType = pt.getActualTypeArguments()[0];
    System.out.println("Tipo genérico de la lista: " + elementType.getTypeName());
}


else {
    String fieldName = field.getName();
    Integer columnIndex = columnMap.get(fieldName);
    ColumnData columnData = field.getAnnotation(ColumnData.class);

    if (columnIndex != null) {
        Object value = getFormattedCellValue(row.getCell(columnIndex), field.getType(), columnData);

        // Si es una relación @ManyToOne, ir a buscar la entidad relacionada
        if (field.isAnnotationPresent(ManyToOne.class)) {
            if (value != null) {
                Class<?> relatedEntityClass = field.getType();
                Optional<Object> repo = resolver.getRepository(relatedEntityClass);

                if (repo.isPresent()) {
                    Object entityReference = repo.get().findById(value);
                    if (entityReference != null) {
                        field.set(entity, entityReference);
                    } else {
                        logger.warn("No se encontró entidad relacionada de tipo {} con ID {}", relatedEntityClass.getSimpleName(), value);
                    }
                } else {
                    logger.warn("No se encontró repositorio para {}", relatedEntityClass.getSimpleName());
                }
            }
        } else {
            field.set(entity, value);
        }
    }
}


private Object getFormattedCellValue(Cell cell, Class<?> targetType, ColumnData columnData) {
    Object value = getCellValue(cell);

    if (columnData != null && columnData.stringDate()) {
        return FORMATTER.format(value);
    }

    if (value instanceof Number) {
        Number number = (Number) value;

        if (targetType == Integer.class || targetType == int.class) {
            return number.intValue();
        } else if (targetType == Long.class || targetType == long.class) {
            return number.longValue();
        } else if (targetType == Float.class || targetType == float.class) {
            return number.floatValue();
        } else if (targetType == Double.class || targetType == double.class) {
            return number.doubleValue();
        } else if (targetType == BigDecimal.class) {
            return BigDecimal.valueOf(number.doubleValue());
        } else if (targetType == String.class) {
            double d = number.doubleValue();
            if (d == Math.floor(d)) {
                return String.format("%.0f", d); // sin notación científica
            } else {
                return BigDecimal.valueOf(d).toPlainString();
            }
        }
    }

    return value;
}


private T createEntityFromRow(Row row, Map<String, Integer> columnMap, Class<T> entityClass, int index) {
    try {
        T entity = entityClass.getDeclaredConstructor().newInstance();

        for (Field field : getAllFields(entityClass)) {
            field.setAccessible(true);

            if (field.isAnnotationPresent(EmbeddedId.class)) {
                Object embeddedId = processEmbeddedId(row, columnMap, field);
                field.set(entity, embeddedId);
            } else {
                String fieldName = field.getName();
                Integer columnIndex = columnMap.get(fieldName);
                ColumnData columnData = field.getAnnotation(ColumnData.class);

                if (columnIndex != null) {
                    Object value = getFormattedCellValue(row.getCell(columnIndex), field.getType(), columnData);
                    field.set(entity, value);
                }
            }
        }

        return entity;
    } catch (Exception e) {
        logger.error("Error while creating entity from {} row: {}", index, e.getMessage());
        return null;
    }
}
🧩 Método processEmbeddedId(...) – Construye el objeto ID
java
Copiar
Editar
private Object processEmbeddedId(Row row, Map<String, Integer> columnMap, Field embeddedField) throws Exception {
    Class<?> idClass = embeddedField.getType();
    Object embeddedId = idClass.getDeclaredConstructor().newInstance();

    for (Field idField : getAllFields(idClass)) {
        idField.setAccessible(true);
        String idFieldName = idField.getName();
        Integer columnIndex = columnMap.get(idFieldName);
        ColumnData columnData = idField.getAnnotation(ColumnData.class);

        if (columnIndex != null) {
            Object value = getFormattedCellValue(row.getCell(columnIndex), idField.getType(), columnData);
            idField.set(embeddedId, value);
        }
    }

    return embeddedId;
}
🧠 Método getFormattedCellValue(...) – Convierte números, fechas, etc.
java
Copiar
Editar
private Object getFormattedCellValue(Cell cell, Class<?> targetType, ColumnData columnData) {
    Object value = getCellValue(cell);

    if (columnData != null && columnData.stringDate()) {
        return FORMATTER.format(value);
    }

    if (targetType.equals(String.class) && value instanceof Number) {
        double d = ((Number) value).doubleValue();
        if (d == Math.floor(d)) {
            return String.format("%.0f", d);
        } else {
            return BigDecimal.valueOf(d).toPlainString();
        }
    }

    return value;
}












if (columnData != null && columnData.stringDate()) {
    field.set(entity, FORMATTER.format(value));
} else {
    if (field.getType().equals(String.class) && value instanceof Number) {
        // Para Double: evitar notación científica
        if (value instanceof Double || value instanceof Float) {
            double doubleVal = ((Number) value).doubleValue();
            if (doubleVal == Math.floor(doubleVal)) {
                // Es un entero, sin decimales: quitar .0
                value = String.format("%.0f", doubleVal);
            } else {
                // Tiene decimales: mantenerlos
                value = String.valueOf(doubleVal);
            }
        } else {
            // Otros tipos numéricos como Integer, Long, etc.
            value = String.valueOf(value);
        }
    }

    field.set(entity, value);
}


private void assignEmbeddedField(Class<?> entityClass, Object item, String fieldName, Object value) {
    for (Field f : entityClass.getDeclaredFields()) {
        if (f.isAnnotationPresent(EmbeddedId.class)) {
            f.setAccessible(true);
            try {
                Object embeddedId = f.get(item);
                if (embeddedId == null) {
                    embeddedId = f.getType().getDeclaredConstructor().newInstance();
                    f.set(item, embeddedId);
                }

                Field embeddedField = getField(embeddedId.getClass(), fieldName);
                if (embeddedField != null) {
                    embeddedField.setAccessible(true);
                    embeddedField.set(embeddedId, value);
                }

            } catch (Exception e) {
                logger.warn("No se pudo asignar valor al campo embebido", e);
            }
        }
    }
}





private String buildIdString(Object idObj) {
    if (idObj == null) return "";

    // Si es una clase JDK simple (String, Long, etc), devuélvelo tal cual
    if (isSimpleType(idObj.getClass())) {
        return idObj.toString();
    }

    StringBuilder sb = new StringBuilder();
    for (Field field : idObj.getClass().getDeclaredFields()) {
        try {
            field.setAccessible(true);
            Object value = field.get(idObj);
            if (value != null) {
                sb.append(field.getName()).append("=").append(value).append(",");
            }
        } catch (IllegalAccessException ignored) {}
    }
    if (sb.length() > 0) sb.setLength(sb.length() - 1); // remove last comma
    return sb.toString();
}

private boolean isSimpleType(Class<?> clazz) {
    return clazz.isPrimitive()
            || clazz == String.class
            || Number.class.isAssignableFrom(clazz)
            || clazz == Boolean.class
            || clazz == Character.class;
}




String encodedId = URLEncoder.encode(buildIdString(item.getId()), StandardCharsets.UTF_8);
outcome.append("&id=").append(encodedId);
sessionContext.setIdParam(encodedId);



private String buildIdString(Object idObj) {
    if (idObj == null) return "";

    if (idObj.getClass().getDeclaredFields().length == 0) {
        return idObj.toString();
    }

    StringBuilder sb = new StringBuilder();
    for (Field field : idObj.getClass().getDeclaredFields()) {
        field.setAccessible(true);
        try {
            Object value = field.get(idObj);
            if (value != null) {
                sb.append(field.getName()).append("=").append(value).append(",");
            }
        } catch (IllegalAccessException ignored) {}
    }
    if (sb.length() > 0) sb.setLength(sb.length() - 1); // remove last comma
    return sb.toString();
}



public <E> E resolveIdParam(Class<?> entityClass, String idParam) {
    try {
        // Detectar si tiene @EmbeddedId
        Field embeddedIdField = Arrays.stream(entityClass.getDeclaredFields())
            .filter(f -> f.isAnnotationPresent(EmbeddedId.class))
            .findFirst()
            .orElse(null);

        if (embeddedIdField != null) {
            // Parsear "tableId=PERSON,sr=100"
            Class<?> embeddedIdClass = embeddedIdField.getType();
            Object embeddedId = embeddedIdClass.getDeclaredConstructor().newInstance();

            String[] parts = idParam.split(",");
            for (String part : parts) {
                String[] keyValue = part.split("=");
                String fieldName = keyValue[0];
                String fieldValue = keyValue[1];

                Field f = embeddedIdClass.getDeclaredField(fieldName);
                f.setAccessible(true);
                f.set(embeddedId, castValue(f.getType(), fieldValue));
            }

            return (E) embeddedId;
        } else {
            // No es EmbeddedId
            return (E) castValue(entityClass.getMethod("getId").getReturnType(), idParam);
        }

    } catch (Exception e) {
        throw new RuntimeException("Error resolviendo idParam", e);
    }
}

private Object castValue(Class<?> type, String value) {
    if (type == Long.class || type == long.class) return Long.parseLong(value);
    if (type == Integer.class || type == int.class) return Integer.parseInt(value);
    if (type == Boolean.class || type == boolean.class) return Boolean.parseBoolean(value);
    return value;
}
































private T processFormData(Map<String, Object> formData) {
    try {
        Class<?> entityClass = sessionContext.getEntityClass();
        T item = (T) entityClass.getDeclaredConstructor().newInstance();

        // Mapa para almacenar temporalmente los EmbeddedId instanciados
        Map<String, Object> embeddedIdMap = new HashMap<>();

        for (Map.Entry<String, Object> entry : formData.entrySet()) {
            String fieldName = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof LocalDateTime ldt) {
                value = Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());
            } else if (value instanceof LocalDate ld) {
                value = Date.from(ld.atStartOfDay(ZoneId.systemDefault()).toInstant());
            }

            Field field = getField(entityClass, fieldName);
            if (field != null) {
                field.setAccessible(true);
                setFieldValueWithAnnotations(field, value, item, entityClass);
            } else {
                // Buscar en campos @EmbeddedId
                for (Field f : entityClass.getDeclaredFields()) {
                    if (f.isAnnotationPresent(EmbeddedId.class)) {
                        f.setAccessible(true);
                        Object embeddedId = embeddedIdMap.computeIfAbsent(f.getName(), k -> {
                            try {
                                return f.getType().getDeclaredConstructor().newInstance();
                            } catch (Exception e) {
                                logger.error("No se pudo instanciar EmbeddedId", e);
                                return null;
                            }
                        });

                        if (embeddedId != null) {
                            Field embeddedField = getField(embeddedId.getClass(), fieldName);
                            if (embeddedField != null) {
                                embeddedField.setAccessible(true);
                                embeddedField.set(embeddedId, value);
                            }
                        }
                    }
                }
            }
        }

        // Asignar los EmbeddedId al item
        for (Field f : entityClass.getDeclaredFields()) {
            if (f.isAnnotationPresent(EmbeddedId.class)) {
                f.setAccessible(true);
                Object embeddedId = embeddedIdMap.get(f.getName());
                if (embeddedId != null) {
                    f.set(item, embeddedId);
                }
            }
        }

        // Adjuntar archivo si hay
        if (docInput != null) {
            setFieldValue(item, docInput.getFileName(), "fileName");

            getDocumentField().ifPresentOrElse(
                field -> setFieldValue(item, docInput.getFile(), field.getName()),
                () -> {
                    logger.error("Document field not found");
                    throw new RuntimeException("Document field not found");
                }
            );
        }

        return item;

    } catch (Exception e) {
        addMessage(FacesMessage.SEVERITY_ERROR, "ERROR", customEntityLabel + " could not be loaded with form data");
        logger.error("Entity could not be loaded with form data", e);
        return null;
    }
}



if (field != null) {
                field.setAccessible(true);
                setFieldValueWithAnnotations(entityClass, item, field, value);
            } else {
                // Buscar en campos embebidos
                for (Field f : entityClass.getDeclaredFields()) {
                    if (f.isAnnotationPresent(EmbeddedId.class)) {
                        f.setAccessible(true);
                        Object embeddedId = f.get(item);

                        if (embeddedId == null) {
                            embeddedId = f.getType().getDeclaredConstructor().newInstance();
                            f.set(item, embeddedId);
                        }

                        Field embeddedField = getField(f.getType(), fieldName);
                        if (embeddedField != null) {
                            embeddedField.setAccessible(true);
                            embeddedField.set(embeddedId, value);
                        }
                    }
                }
            }
        }








package com.bns.hrappadmin.model.pk;

import java.io.Serializable;
import java.util.Objects;

public class EmailAddressId implements Serializable {

    private Integer sr;
    private String tableId;

    public EmailAddressId() {}

    public EmailAddressId(Integer sr, String tableId) {
        this.sr = sr;
        this.tableId = tableId;
    }

    public Integer getSr() {
        return sr;
    }

    public void setSr(Integer sr) {
        this.sr = sr;
    }

    public String getTableId() {
        return tableId;
    }

    public void setTableId(String tableId) {
        this.tableId = tableId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EmailAddressId)) return false;
        EmailAddressId that = (EmailAddressId) o;
        return Objects.equals(sr, that.sr) && Objects.equals(tableId, that.tableId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sr, tableId);
    }
}



package com.bns.hrappadmin.hrcontrol.model;

import com.bns.hrappadmin.model.generic.BaseEntity;
import com.bns.hrappadmin.model.pk.EmailAddressId;
import com.bns.hrappadmin.utils.annotations.ColumnData;
import com.bns.hrappadmin.utils.annotations.Metadata;
import com.bns.hrappadmin.utils.annotations.TableData;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "DD_Stg_Input_EmailAddress")
@IdClass(EmailAddressId.class)
@Metadata(
    data = {
        @TableData(
            name = "Email Address Input",
            tableLabel = "Email Address Input",
            entityLabel = "Email Address Input"
        )
    }
)
public class EmailAddressInput extends BaseEntity<EmailAddressId> {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "Sr")
    private Integer sr;

    @Id
    @Column(name = "Table_ID", length = 255, nullable = false)
    private String tableId;

    @Column(name = "Email_Address", length = 255)
    private String emailAddress;

    @Column(name = "Email_CC", length = 255)
    private String emailCC;

    @Column(name = "Email_BCC", length = 255)
    private String emailBCC;

    @Column(name = "Email_Attachment", length = 255)
    private String emailAttachment;

    @Column(name = "Email_Language", length = 2)
    private String emailLanguage;

    @Column(name = "SSIS_PKG_Name", length = 8000)
    private String ssisPkgName;

    @Column(name = "Comments", length = 8000)
    private String comments;

    @Column(name = "DateCreated")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateCreated;

    public EmailAddressInput() {
    }

    @Override
    @Transient
    public EmailAddressId getId() {
        return new EmailAddressId(sr, tableId);
    }

    @Override
    public void setId(EmailAddressId id) {
        if (id != null) {
            this.sr = id.getSr();
            this.tableId = id.getTableId();
        }
    }

    // Getters y setters

    public Integer getSr() {
        return sr;
    }

    public void setSr(Integer sr) {
        this.sr = sr;
    }

    public String getTableId() {
        return tableId;
    }

    public void setTableId(String tableId) {
        this.tableId = tableId;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public String getEmailCC() {
        return emailCC;
    }

    public void setEmailCC(String emailCC) {
        this.emailCC = emailCC;
    }

    public String getEmailBCC() {
        return emailBCC;
    }

    public void setEmailBCC(String emailBCC) {
        this.emailBCC = emailBCC;
    }

    public String getEmailAttachment() {
        return emailAttachment;
    }

    public void setEmailAttachment(String emailAttachment) {
        this.emailAttachment = emailAttachment;
    }

    public String getEmailLanguage() {
        return emailLanguage;
    }

    public void setEmailLanguage(String emailLanguage) {
        this.emailLanguage = emailLanguage;
    }

    public String getSsisPkgName() {
        return ssisPkgName;
    }

    public void setSsisPkgName(String ssisPkgName) {
        this.ssisPkgName = ssisPkgName;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Date getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Date dateCreated) {
        this.dateCreated = dateCreated;
    }
}


@Embeddable
public class ReportDistributionId implements Serializable {

    @Column(name = "Transit", length = 5)
    private String transit;

    @Column(name = "Report_Name", length = 100)
    private String reportName;

    public ReportDistributionId() {}

    public ReportDistributionId(String transit, String reportName) {
        this.transit = transit;
        this.reportName = reportName;
    }

    // Getters y setters

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReportDistributionId)) return false;
        ReportDistributionId that = (ReportDistributionId) o;
        return Objects.equals(transit, that.transit) &&
               Objects.equals(reportName, that.reportName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(transit, reportName);
    }
}




<c:forEach items="#{genericCrudBean.inputs}" var="input" varStatus="status">
    <f:subview id="sv_#{input.name}_#{status.index}">

</f:subview>
        </c:forEach>

import jakarta.faces.component.UIComponent;

private UIComponent component;

public UIComponent getComponent() {
    return component;
}

public void setComponent(UIComponent component) {
    this.component = component;
}

public String getClientId() {
    return component != null ? component.getClientId() : null;
}



<p:selectOneMenu id="combo"
                 value="#{genericCrudBean.formData[input.name]}"
                 rendered="#{input.relation and not input.radioSelection}"
                 converter="baseEntityConverter"
                 required="#{input.required}"
                 binding="#{input.component}">









🔧 Método para obtener el <h:form id="genericForm">
java
Copiar
Editar
private UIComponent getFormComponent(String formId) {
    return FacesContext.getCurrentInstance()
                       .getViewRoot()
                       .findComponent(formId);
}
🔍 Método para recorrer el árbol y recolectar todos los componentes que tengan el atributo fieldName
java
Copiar
Editar
private List<UIComponent> findComponentsWithFieldName(UIComponent parent) {
    List<UIComponent> result = new ArrayList<>();
    if (parent == null) return result;

    Object fieldName = parent.getAttributes().get("fieldName");
    if (fieldName != null) {
        result.add(parent);
    }

    for (UIComponent child : parent.getChildren()) {
        result.addAll(findComponentsWithFieldName(child));
    }

    for (UIComponent facet : parent.getFacets().values()) {
        result.addAll(findComponentsWithFieldName(facet));
    }

    return result;
}



 UIComponent form = getFormComponent("genericForm");
            List<UIComponent> matches = findComponentsWithFieldName(form);

private void printComponentTree(UIComponent component, String indent) {
    if (component == null) return;

    logger.info("{}{} [{}] attributes: {}", indent, component.getId(), component.getClass().getSimpleName(), component.getAttributes().keySet());

    for (UIComponent child : component.getChildren()) {
        printComponentTree(child, indent + "  ");
    }

    for (UIComponent facet : component.getFacets().values()) {
        printComponentTree(facet, indent + "  ");
    }
}

printComponentTree(FacesContext.getCurrentInstance().getViewRoot(), "");


private UIComponent findComponentWithFieldName(UIComponent root, String targetFieldName) {
    if (root == null) return null;

    Object attr = root.getAttributes().get("fieldName");
    if (attr != null && targetFieldName.equals(attr.toString())) {
        return root;
    }

    for (UIComponent child : root.getChildren()) {
        UIComponent found = findComponentWithFieldName(child, targetFieldName);
        if (found != null) return found;
    }

    // También recorrer facets si los hay
    for (UIComponent facet : root.getFacets().values()) {
        UIComponent found = findComponentWithFieldName(facet, targetFieldName);
        if (found != null) return found;
    }

    return null;
}
UIComponent root = FacesContext.getCurrentInstance().getViewRoot();
                UIComponent targetDropdown = findComponentWithFieldName(root, field.getName());

<ui:repeat value="#{genericCrudBean.inputs}" var="input" varStatus="status">
    <p:selectOneMenu id="combo_#{status.index}"
                     value="#{genericCrudBean.formData[input.name]}"
                     rendered="#{input.relation and not input.radioSelection}"
                     converter="baseEntityConverter"
                     required="#{input.required}">
        
        <f:attribute name="fieldName" value="#{input.dropdownName}" />
        <f:attribute name="options" value="#{input.options}" />

        <f:selectItem itemLabel="#{input.label}" itemValue="#{null}" />
        <f:selectItems value="#{input.options}" var="opt"
                       itemLabel="#{opt.value}" itemValue="#{opt}" />

        <p:ajax event="change"
                listener="#{genericCrudBean.onDropdownChange}"
                update="@form" />
    </p:selectOneMenu>
</ui:repeat>



logger.info("Found fieldName: {} | ClientId: {}", fieldName, child.getClientId());

logger.info("InputModel name: {} - rendered: {}", input.getName(), input.isRelation());


public void logAllFieldNames(UIComponent base) {
    for (UIComponent child : base.getFacetsAndChildren()) {
        Object fieldName = child.getAttributes().get("fieldName");
        if (fieldName != null) {
            logger.info("Found fieldName: {}", fieldName);
        }

        // Recursión profunda
        logAllFieldNames(child);
    }
}


 logAllFieldNames(context.getViewRoot());



public List<UIComponent> findComponentsByFieldName(UIComponent root, String targetFieldName) {
    List<UIComponent> result = new ArrayList<>();

    for (UIComponent child : root.getChildren()) {
        Object fieldNameAttr = child.getAttributes().get("fieldName");
        if (targetFieldName.equals(fieldNameAttr)) {
            result.add(child);
        }

        // Recursivamente buscar en hijos también
        result.addAll(findComponentsByFieldName(child, targetFieldName));
    }

    return result;
}




 UIComponent root = context.getViewRoot();
                List<UIComponent> matches = findComponentsByFieldName(root, field.getName());

                for (UIComponent comp : matches) {
                    String clientId = comp.getClientId(context);
                    PrimeFaces.current().ajax().update(clientId);
                }



1) En tu GenericCrudBean
java
Copiar
Editar
// agrega esto
private final Map<String, UIComponent> inputComponents = new HashMap<>();
public Map<String, UIComponent> getInputComponents() { return inputComponents; }
2) En el XHTML (dentro del ui:repeat)
xml
Copiar
Editar
<p:selectOneMenu id="combo"
                 binding="#{genericCrudBean.inputComponents[input.name]}"
                 value="#{genericCrudBean.formData[input.name]}"
                 rendered="#{input.relation and not input.radioSelection}"
                 converter="baseEntityConverter"
                 required="#{input.required}">
    <f:attribute name="fieldName" value="#{input.name}" />
    <f:attribute name="options" value="#{input.options}" />
    <f:selectItem itemLabel="#{input.label}" itemValue="#{null}" />
    <f:selectItems value="#{input.options}" var="opt" itemLabel="#{opt.value}" itemValue="#{opt}" />

    <p:ajax event="change"
            listener="#{genericCrudBean.onDropdownChange}"
            process="@this"
            update="@this" />
</p:selectOneMenu>
Nota: el update="@this" solo refresca el dropdown que cambió. El dependiente lo actualizamos desde el backend con PrimeFaces.current().ajax().update(...).

3) Completa tu onDropdownChange
java
Copiar
Editar
public void onDropdownChange() {
    FacesContext ctx = FacesContext.getCurrentInstance();
    UIComponent source = UIComponent.getCurrentComponent(ctx);

    String changedFieldName = (String) source.getAttributes().get("fieldName");
    if (changedFieldName == null) {
        logger.warn("Dropdown change triggered without identifying the changed field");
        return;
    }

    Object selectedValue = formData.get(changedFieldName);

    Class<?> entityClass = sessionContext.getEntityClass();
    for (Field field : entityClass.getDeclaredFields()) {
        DropdownChange change = field.getAnnotation(DropdownChange.class);
        if (change != null && change.source().equals(changedFieldName)) {

            // Arma los filtros como tú definiste (ajusta este método a tu regla)
            String[] resolvedFilters = resolveDynamicFilters(change.filters(), changedFieldName, selectedValue);

            InputModel input = getInputModel(field.getName());
            if (input != null) {
                List<FormOption> options = formOptionService.findAllFormOptions(
                        input.getEntityClass(), input.getDisplayField(), resolvedFilters);

                input.setOptions(options);
                formData.put(field.getName(), null); // limpia selección previa

                // --- Actualiza SOLO el dropdown dependiente ---
                UIComponent target = inputComponents.get(field.getName());
                if (target != null) {
                    PrimeFaces.current().ajax().update(target.getClientId(ctx));
                } else {
                    logger.warn("No UIComponent bound for dependent field {}", field.getName());
                }
            }
        }
    }
}



public void onDropdownChange() {
    FacesContext context = FacesContext.getCurrentInstance();
    UIComponent component = UIComponent.getCurrentComponent(context);

    String changedFieldName = (String) component.getAttributes().get("fieldName");

    if (changedFieldName == null) {
        logger.warn("Dropdown change triggered without identifying the changed field");
        return;
    }

    Object selectedValue = formData.get(changedFieldName);

    for (Field field : sessionContext.getEntityClass().getDeclaredFields()) {
        DropdownChange change = field.getAnnotation(DropdownChange.class);
        if (change != null && change.source().equals(changedFieldName)) {
            String[] resolvedFilters = resolveDynamicFilters(change.filters(), formData);

            InputModel input = getInputModel(field.getName());
            if (input != null) {
                List<FormOption> options = formOptionService.findAllFormOptions(
                    input.getEntityClass(), input.getDisplayField(), resolvedFilters);
                input.setOptions(options);
                formData.put(field.getName(), null); // Limpia valor actual
            }
        }
    }
}


private String[] resolveDynamicFilters(String[] filterKeys, Map<String, Object> context) {
    return Arrays.stream(filterKeys)
        .map(key -> {
            Object value = context.get(key);
            return value != null ? key + ":" + value.toString() : null;
        })
        .filter(Objects::nonNull)
        .toArray(String[]::new);
}



private String[] resolveDynamicFilters(String[] rawFilters, Map<String, Object> formData) {
    return Arrays.stream(rawFilters)
        .map(key -> {
            Object value = formData.get(key);
            return (value != null) ? key + ":" + value.toString() : null;
        })
        .filter(Objects::nonNull)
        .toArray(String[]::new);
}



Class<?> entityClass = sessionContext.getEntityClass();

for (Field field : entityClass.getDeclaredFields()) {
    DropdownChange dropdownChange = field.getAnnotation(DropdownChange.class);

    if (dropdownChange != null && dropdownChange.source().equals(fieldName)) {
        // ¡Aquí está el campo dependiente!

        String[] resolvedFilters = resolveDynamicFilters(dropdownChange.filters(), formData);

        InputModel input = getInputModel(field.getName());

        if (input != null) {
            List<FormOption> options = formOptionService.findAllFormOptions(
                input.getEntityClass(),
                input.getDisplayField(),
                resolvedFilters
            );

            input.setOptions(options);

            // Limpiar el valor anterior seleccionado
            formData.put(field.getName(), null);
        }
    }
}


<p:selectOneMenu id="combo_#{input.name}"
    value="#{genericCrudBean.formData[input.name]}"
    rendered="#{input.relation and not input.radioSelection}"
    converter="baseEntityConverter"
    required="#{input.required}">
    
    <f:attribute name="fieldName" value="#{input.name}" />
    <f:attribute name="options" value="#{input.options}" />
    
    <f:selectItem itemLabel="#{input.label}" itemValue="#{null}" />
    <f:selectItems value="#{input.options}" var="opt" itemLabel="#{opt.value}" itemValue="#{opt}" />
    
    <p:ajax event="change"
        listener="#{genericCrudBean.onDropdownChange}"
        update="@form"
        process="@this" />
</p:selectOneMenu>

public void onDropdownChange() {
    FacesContext context = FacesContext.getCurrentInstance();
    UIComponent component = UIComponent.getCurrentComponent(context);

    String changedFieldName = (String) component.getAttributes().get("fieldName");

    if (changedFieldName == null) {
        logger.warn("Dropdown change triggered without identifying the changed field");
        return;
    }

    Object selectedValue = formData.get(changedFieldName);

    for (Field field : sessionContext.getEntityClass().getDeclaredFields()) {
        DropdownChange change = field.getAnnotation(DropdownChange.class);
        if (change != null && change.source().equals(changedFieldName)) {
            String[] resolvedFilters = resolveDynamicFilters(change.filters(), formData);

            InputModel input = getInputModel(field.getName());
            if (input != null) {
                List<FormOption> options = formOptionService.findAllFormOptions(
                    input.getEntityClass(), input.getDisplayField(), resolvedFilters);
                input.setOptions(options);
                formData.put(field.getName(), null); // Limpia valor actual
            }
        }
    }
}









public void onDropdownChange() {
    FacesContext context = FacesContext.getCurrentInstance();
    String changedFieldName = context.getExternalContext().getRequestParameterMap().get("changedField");

    if (changedFieldName == null) {
        logger.warn("Dropdown change triggered without identifying the changed field");
        return;
    }

    Object selectedValue = formData.get(changedFieldName);

    for (Field field : sessionContext.getEntityClass().getDeclaredFields()) {
        DropdownChange change = field.getAnnotation(DropdownChange.class);
        if (change != null && change.source().equals(changedFieldName)) {
            String[] resolvedFilters = resolveDynamicFilters(change.filters(), formData);

            InputModel input = getInputModel(field.getName());
            if (input != null) {
                List<FormOption> options = formOptionService.findAllFormOptions(
                    input.getEntityClass(), input.getDisplayField(), resolvedFilters);
                input.setOptions(options);

                // Limpiar valor actual
                formData.put(field.getName(), null);
            }
        }
    }
}



<p:selectOneMenu id="combo_#{input.name}"
    value="#{genericCrudBean.formData[input.name]}"
    rendered="#{input.relation and not input.radioSelection}"
    converter="baseEntityConverter"
    required="#{input.required}">
    
    <f:attribute name="options" value="#{input.options}" />
    <f:selectItem itemLabel="#{input.label}" itemValue="#{null}" />
    <f:selectItems value="#{input.options}" var="opt" itemLabel="#{opt.value}" itemValue="#{opt}" />
    
    <p:ajax event="change"
        listener="#{genericCrudBean.onDropdownChange}"
        update="@form">
        <f:param name="changedField" value="#{input.name}" />
    </p:ajax>
</p:selectOneMenu>






public void onDropdownChange(String changedFieldName) {
    Object selectedValue = formData.get(changedFieldName);

    for (Field field : sessionContext.getEntityClass().getDeclaredFields()) {
        DropdownChange change = field.getAnnotation(DropdownChange.class);
        if (change != null && change.source().equals(changedFieldName)) {
            String[] resolvedFilters = resolveDynamicFilters(change.filters(), formData);

            InputModel input = getInputModel(field.getName());
            if (input != null) {
                List<FormOption> options = formOptionService.findAllFormOptions(
                    input.getEntityClass(), input.getDisplayField(), resolvedFilters);
                input.setOptions(options);
            }
        }
    }
}



<p:selectOneMenu id="combo_country"
    value="#{genericCrudBean.formData['country']}"
    required="true" converter="baseEntityConverter">
    <f:selectItem itemLabel="Select..." itemValue="#{null}" />
    <f:selectItems value="#{input.options}" var="opt" itemLabel="#{opt.value}" itemValue="#{opt}" />
    <p:ajax event="change"
        listener="#{genericCrudBean.onDropdownChange('country')}"
        update="@form" />
</p:selectOneMenu>


















private Serializable resolveReferenceId(Object value, InputModel inputModel) {
    if (value instanceof Serializable id) {
        return id;
    }

    String searchValue = (String) value;
    if (searchValue != null) {
        FormOption option = inputModel.getOptions().stream()
                .filter(opt -> opt.getValue().trim().equals(searchValue.trim()))
                .findFirst()
                .orElse(null);
        return option == null ? null : option.getId();
    }

    return null;
}















@FacesConverter(value = "baseEntityConverter", managed = true)
public class BaseEntityConverter implements Converter<Object> {

    @Override
    public Object getAsObject(FacesContext facesContext, UIComponent uiComponent, String s) {
        if (s == null || s.isEmpty()) {
            return null;
        }

        List<FormOption> options = (List<FormOption>) uiComponent.getAttributes().get("options");
        if (options == null) {
            return null;
        }

        return options.stream()
                .filter(op -> Objects.equals(String.valueOf(op.getId()), s))
                .findFirst()
                .orElse(null);
    }

    @Override
    public String getAsString(FacesContext facesContext, UIComponent uiComponent, Object o) {
        if (o == null) {
            return "";
        }

        try {
            Object id = o.getClass().getMethod("getId").invoke(o);
            return id != null ? String.valueOf(id) : "";
        } catch (Exception e) {
            // Optional: log the error
            return "";
        }
    }
}











<h:outputText value="MinLength: #{input.minLength}" />
<p:inputText id="text_#{input.name}" placeholder="#{input.label}"
             value="#{genericCrudBean.formData[input.name]}" 
             rendered="#{input.stringType}"
             required="#{input.required}" 
             maxlength="#{input.maxLength}" 
             counterTemplate="{0}">
    
    <f:passThroughAttribute name="minlength" value="#{input.minLength}" />
    <f:passThroughAttribute name="title" value="minLength=#{input.minLength}" />

</p:inputText>



<p:inputText id="campo"
             value="#{bean.valor}"
             required="true"
             maxlength="20">
    <f:passThroughAttribute name="minlength" value="12"/>
    <f:validateLength minimum="12" maximum="20"/>
</p:inputText>






import jakarta.persistence.Id;

public String getIdFieldName(Class<?> clazz) {
    for (Field field : clazz.getDeclaredFields()) {
        if (field.isAnnotationPresent(Id.class)) {
            return field.getName();
        }
    }

    // También puedes buscar en superclases si el ID está ahí
    Class<?> superClass = clazz.getSuperclass();
    if (superClass != null && superClass != Object.class) {
        return getIdFieldName(superClass);
    }

    return null;
}



String[] safeFilters = filters != null ? filters : new String[0];


public <T extends BaseEntity<E>, E> List<FormOption> findAllFormOptions(
        Class<?> entityClass, String displayValue, String[] filters) {

    BaseRepository<T, E> repository = getRepository(entityClass);

    Map<String, Object> filterMap = Arrays.stream(filters)
        .map(f -> f.split(":", 2))
        .filter(arr -> arr.length == 2)
        .collect(Collectors.toMap(arr -> arr[0], arr -> convert(arr[1])));

    return repository.findAll().stream()
        .filter(obj -> matchesFilters(obj, filterMap))
        .map(obj -> {
            Object value = resolveProperty(obj, displayValue);
            return new FormOption(((BaseEntity<?>) obj).getId(), String.valueOf(value), obj.getClass());
        })
        .toList();
}
✅ matchesFilters
java
Copiar
Editar
private boolean matchesFilters(Object obj, Map<String, Object> filters) {
    for (Map.Entry<String, Object> entry : filters.entrySet()) {
        Object fieldValue = resolveProperty(obj, entry.getKey());

        if (fieldValue == null || !fieldValue.equals(entry.getValue())) {
            return false;
        }
    }
    return true;
}
✅ convert (para convertir "true" → Boolean, "123" → Integer, etc.)
java
Copiar
Editar
private Object convert(String raw) {
    if ("true".equalsIgnoreCase(raw) || "false".equalsIgnoreCase(raw)) {
        return Boolean.parseBoolean(raw);
    }

    try {
        return Integer.parseInt(raw);
    } catch (NumberFormatException ignored) { }

    return raw;
}













public <T extends BaseEntity<E>, E> List<FormOption> findAllFormOptions(Class<?> entityClass, String displayValue) {
    BaseRepository<T, E> repository = getRepository(entityClass);
    EntityReference ref = findEntityReferenceAnnotation(entityClass, displayValue);

    Map<String, Object> filterMap = new HashMap<>();

    if (ref != null) {
        for (String filter : ref.filters()) {
            String[] parts = filter.split(":", 2);
            if (parts.length == 2) {
                filterMap.put(parts[0], convert(parts[1]));
            }
        }
    }

    return repository.findAll().stream()
        .filter(obj -> matchesFilters(obj, filterMap))
        .map(obj -> {
            Object value = resolveProperty(obj, displayValue);
            return new FormOption(obj.getId(), String.valueOf(value), obj.getClass());
        })
        .toList();
}
✅ Método matchesFilters(...)
java
Copiar
Editar
private boolean matchesFilters(Object obj, Map<String, Object> filters) {
    for (Map.Entry<String, Object> entry : filters.entrySet()) {
        Object fieldValue = resolveProperty(obj, entry.getKey());
        if (fieldValue == null || !fieldValue.equals(entry.getValue())) {
            return false;
        }
    }
    return true;
}
✅ Método findEntityReferenceAnnotation(...) (igual que antes)
java
Copiar
Editar
private EntityReference findEntityReferenceAnnotation(Class<?> entityClass, String displayValue) {
    for (Field field : entityClass.getDeclaredFields()) {
        EntityReference ref = field.getAnnotation(EntityReference.class);
        if (ref != null && displayValue.equals(ref.fieldName())) {
            return ref;
        }
    }
    return null;
}
✅ Método convert(...) simple
java
Copiar
Editar
private Object convert(String raw) {
    if ("true".equalsIgnoreCase(raw)) return true;
    if ("false".equalsIgnoreCase(raw)) return false;
    if (raw.matches("-?\\d+")) return Integer.parseInt(raw);
    return raw;
}


















✅ Paso 1: Suposiciones
TmGenericControl es la entidad de donde se llena el dropdown.

filters = {"type:ROLE", "active:true"} indica que se debe filtrar por type = 'ROLE' y active = true.

Estás usando un método genérico como este:

java
Copiar
Editar
public <T extends BaseEntity<E>, E> List<FormOption> findAllFormOptions(Class<?> entityClass, String displayValue)
✅ Paso 2: Implementación organizada
java
Copiar
Editar
public <T extends BaseEntity<E>, E> List<FormOption> findAllFormOptions(Class<?> entityClass, String displayValue) {
    BaseRepository<T, E> repository = getRepository(entityClass);
    List<T> allItems = repository.findAll();

    return allItems.stream()
        .filter(item -> matchesEntityReferenceFilters(item, entityClass))
        .map(obj -> {
            Object value = resolveProperty(obj, displayValue);
            return new FormOption(obj.getId(), String.valueOf(value), obj.getClass());
        })
        .toList();
}
✅ Paso 3: Método matchesEntityReferenceFilters
java
Copiar
Editar
private boolean matchesEntityReferenceFilters(Object entity, Class<?> targetClass) {
    for (Field field : getAllFieldsReferencing(targetClass)) {
        EntityReference ref = field.getAnnotation(EntityReference.class);
        if (ref != null && ref.targetEntity().equals(targetClass)) {
            for (String filter : ref.filters()) {
                String[] parts = filter.split(":", 2);
                if (parts.length != 2) continue;

                String property = parts[0].trim();
                Object expectedValue = convert(parts[1].trim());

                Object actualValue = resolveProperty(entity, property);
                if (actualValue == null || !actualValue.equals(expectedValue)) {
                    return false;
                }
            }
        }
    }
    return true;
}
✅ Método auxiliar getAllFieldsReferencing
java
Copiar
Editar
private List<Field> getAllFieldsReferencing(Class<?> referencedClass) {
    return Arrays.stream(DFCReportDistribution.class.getDeclaredFields())
        .filter(f -> {
            EntityReference ref = f.getAnnotation(EntityReference.class);
            return ref != null && ref.targetEntity().equals(referencedClass);
        })
        .toList();
}
✅ Método convert(String)
java
Copiar
Editar
private Object convert(String value) {
    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
        return Boolean.parseBoolean(value);
    }

    try {
        return Integer.parseInt(value);
    } catch (NumberFormatException ignored) {}

    try {
        return Long.parseLong(value);
    } catch (NumberFormatException ignored) {}

    return value; // fallback: keep as string
}










public Map<String, Object> extractFilters(Field field) {
    EntityReference ref = field.getAnnotation(EntityReference.class);
    Map<String, Object> filterMap = new HashMap<>();
    if (ref != null && ref.filters().length > 0) {
        for (String filter : ref.filters()) {
            String[] parts = filter.split(":", 2);
            if (parts.length == 2) {
                filterMap.put(parts[0], convert(parts[1]));
            }
        }
    }
    return filterMap;
}



private String resolveMaxValuePattern(Field field) {
    int precision = 0;
    int scale = 0;

    AttributeOverride override = modelClass.getAnnotation(AttributeOverride.class);
    if (override != null && override.name().equals(field.getName())) {
        precision = override.column().precision();
        scale = override.column().scale();
    } else {
        Column column = getColumnAnnotation(field);
        if (column != null) {
            precision = column.precision();
            scale = column.scale();
        }
    }

    if (precision == 0) {
        return ""; // sin restricción
    }

    int integerDigits = precision - scale;
    if (integerDigits <= 0) {
        integerDigits = 1; // al menos 1 dígito entero
    }

    StringBuilder pattern = new StringBuilder();
    for (int i = 0; i < integerDigits; i++) {
        pattern.append("9");
    }

    if (scale > 0) {
        pattern.append(".");
        for (int i = 0; i < scale; i++) {
            pattern.append("9");
        }
    }

    return pattern.toString(); // ejemplo: "9999.9999"
}




public int getDecimalPlaces() {
    return scale;
}

public String getMaxValuePattern() {
    int integerDigits = precision - scale;
    StringBuilder pattern = new StringBuilder();
    for (int i = 0; i < integerDigits; i++) {
        pattern.append("9");
    }
    if (scale > 0) {
        pattern.append(".");
        for (int i = 0; i < scale; i++) {
            pattern.append("9");
        }
    }
    return pattern.toString(); // e.g. "9999.9999"
}



public boolean isIntegerType() {
    return (type == Integer.class || type == int.class || type == Long.class || type == long.class)
            && !readOnly;
}

public boolean isDecimalType() {
    return type == BigDecimal.class && !readOnly;
}


public boolean isDecimalType() {
    return (type == BigDecimal.class || type == Double.class || type == Float.class) && !readOnly;
}



private Object convertToFieldType(Field field, Object value) {
    if (!(value instanceof String strValue)) {
        return value;
    }

    Class<?> targetType = field.getType();

    try {
        strValue = strValue.replace(",", "").trim(); // elimina separador de miles

        if (targetType == BigDecimal.class) {
            return new BigDecimal(strValue);
        } else if (targetType == Double.class || targetType == double.class) {
            return Double.parseDouble(strValue);
        } else if (targetType == Float.class || targetType == float.class) {
            return Float.parseFloat(strValue);
        } else if (targetType == Long.class || targetType == long.class) {
            return Long.parseLong(strValue);
        } else if (targetType == Integer.class || targetType == int.class) {
            return Integer.parseInt(strValue);
        } else if (targetType == Short.class || targetType == short.class) {
            return Short.parseShort(strValue);
        }
    } catch (NumberFormatException e) {
        logger.warn("Could not convert value [{}] to type [{}] for field [{}]",
                strValue, targetType.getSimpleName(), field.getName());
    }

    return value; // fallback si no pudo convertir
}
