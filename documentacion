/// <summary>
/// Service class responsible for reading, writing, and managing credentials
/// in the Windows Credential Manager (WCM).
/// 
/// Supports both standard and fragmented credentials (split due to size limits).
/// Uses the CredentialManager API to interact with system-level secrets.
/// </summary>
internal class WCMService
{
    /// <summary>
    /// Reads a credential from Windows Credential Manager by name and (optionally) username.
    /// Throws an exception if not found or if the username does not match.
    /// </summary>
    /// <param name="name">The name/key of the credential.</param>
    /// <param name="username">Optional expected username to validate.</param>
    /// <returns>The retrieved credential.</returns>
    public Credential ReadCredential(string name, string username)
    {
        
    }

    /// <summary>
    /// Reads a fragmented credential composed of multiple parts (due to size limitations).
    /// The parts are expected to follow a naming convention: {name}_PART_{index}.
    /// </summary>
    /// <param name="name">The logical name of the full credential (without _PART_ suffix).</param>
    /// <returns>The reassembled credential.</returns>
    public Credential ReadFragmentedCredential(string name)
    {
       
    }

    /// <summary>
    /// Creates a credential in Windows Credential Manager.
    /// If the secret exceeds the allowed length, it is automatically split and stored as fragments.
    /// </summary>
    /// <param name="name">The base name/key of the credential.</param>
    /// <param name="userName">The username associated with the credential.</param>
    /// <param name="secret">The secret or password to store.</param>
    public void CreateCredential(string name, string userName, string secret)
    {
       
    }

    /// <summary>
/// Writes a single credential entry to Windows Credential Manager.
/// This method uses the provided credential name, username, and secret to create or update
/// an entry in the system's secure credential store.
/// </summary>
/// <param name="name">The unique name of the credential entry.</param>
/// <param name="userName">The username associated with the credential.</param>
/// <param name="secret">The secret (e.g., password, token) to store securely.</param>
private void WriteCredential(string name, string userName, string secret)
{

}


    /// <summary>
    /// Splits a long secret into multiple parts to bypass WCM size limitations.
    /// Each fragment is named using the format {name}_PART_{index}.
    /// </summary>
    /// <param name="name">The base name of the credential.</param>
    /// <param name="secret">The full secret to be split.</param>
    /// <returns>A dictionary of fragment names and corresponding secret parts.</returns>
    private Dictionary<string, string> BuildPartitionedLongCredential(string name, string secret)
    {
     
    }
}



/// <summary>
/// Provides a method to retrieve secrets from Azure Key Vault using a specified key and vault URI.
/// This class uses the Azure SDK with `DefaultAzureCredential` for authentication,
/// and allows proxy-aware HTTP communication for enterprise environments.
/// </summary>
internal class AKVService
{
    /// <summary>
    /// Asynchronously retrieves a secret value from Azure Key Vault.
    /// </summary>
    /// <param name="keyUri">The URI of the Azure Key Vault (e.g., https://myvault.vault.azure.net/).</param>
    /// <param name="key">The name of the secret to retrieve.</param>
    /// <returns>The value of the requested secret.</returns>
    /// <exception cref="InvalidOperationException">
    /// Thrown if the secret is not found or has no value.
    /// </exception>
    public async Task<string> GetAKVaultAsync(string keyUri, string key)


## Dependencies

| NuGet Package                                      | Version | Description                                     |
|---------------------------------------------------|---------|-------------------------------------------------|
| Microsoft.Owin.Host.SystemWeb                     | 4.2.2   | Enables OWIN integration in System.Web apps     |
| Microsoft.Owin.Security                           | 4.2.2   | Base middleware for authentication              |
| Microsoft.Owin.Security.Cookies                   | 4.2.2   | Cookie-based authentication support             |
| Microsoft.Owin.Security.OpenIdConnect             | 4.2.2   | OIDC protocol integration for OWIN              |
| Microsoft.IdentityModel.Protocols                 | 5.3.0   | Support for reading OIDC metadata               |
| Microsoft.IdentityModel.Protocols.OpenIdConnect   | 5.3.0   | OIDC protocol helpers for token validation      |
| Microsoft.IdentityModel.Tokens                    | 8.8.0   | Token validation and cryptographic support      |
| System.IdentityModel.Tokens.Jwt                   | 8.8.0   | Parsing and decoding JWTs (used by TokenHelper) |


## How It Works

### 1. Page Authentication

Inherit from `AuthPage` in your `.aspx.cs` code-behind:

```csharp
public partial class Dashboard : AuthPage
{
    protected void Page_Load(object sender, EventArgs e)
    {
        var userInfo = this.TokenEmpInfo;
        if (userInfo != null)
        {
            welcomeLabel.Text = $"Welcome, {userInfo.GivenName}";
        }
    }
}

## Library Structure

| Component      | Purpose                                                              |
|----------------|----------------------------------------------------------------------|
| `AuthPage`     | Base page that handles WAM redirect and token validation.            |
| `TokenEmpInfo` | Model for storing authenticated user's identity information.         |
| `TokenHelper`  | Utility class for checking authentication and reading token claims.  |

---

## Limitations

- Designed specifically for **ASP.NET Web Forms (.aspx)** applications using **OWIN-based authentication**.
- Assumes `id.token` and `access.token` have been added to claims during the `SecurityTokenValidated` event (usually handled in the application's OWIN configuration).




# AspOwinOAuthLib

## Overview

**AspOwinOAuthLib** is a lightweight utility library for **ASP.NET Web Forms (.NET Framework 4.7.2)** that provides a base class for `.aspx` pages to **enforce authentication early in the page lifecycle**.

The library integrates with an existing **OWIN-based authentication setup**, but does **not depend on OwinOAuthLib** or any specific OAuth configuration library.  
Its only purpose is to **override `Page.OnInit`**, ensuring that unauthenticated users are redirected to the login flow (e.g., WAM), and that the authentication context is validated before any page logic is executed.

## Key Features

- Reusable base class `AuthPage` for `.aspx` code-behind files.
- Forces OAuth authentication at `OnInit`, before controls or logic are loaded.
- Redirects unauthenticated users to WAM using `Authentication.Challenge`.
- Allows dynamic control of the post-authentication redirect URI via `HttpContext.Items`.
- Extracts identity information (like the `sub` claim) from the token and stores it in `TokenEmpInfo`.
- Includes a `TokenHelper` utility for accessing token data safely.

## Target Framework

- .NET Framework 4.7.2 (ASP.NET Web Forms)

## Installation

Include the library project in your solution or add the DLL to your Web Forms application.

### Required NuGet Packages

These must be installed in the consuming application (not in this library):

```xml
<PackageReference Include="Microsoft.Owin" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Host.SystemWeb" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.Cookies" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.OpenIdConnect" Version="4.2.2" />


# AspOwinOAuthLib

## Overview

**AspOwinOAuthLib** is a helper library for ASP.NET Web Forms applications (.NET Framework 4.7.2) that integrates with the OWIN OAuth/OIDC authentication pipeline to manage user login redirection and token-based identity extraction.

It complements `OwinOAuthLib` by handling redirect challenges to WAM (Web Access Manager), and provides utility methods and base classes to simplify authentication enforcement and user context management within Web Forms (`.aspx`) pages.

## Key Features

- Provides a reusable `AuthPage` base class that enforces authentication on every page request.
- Manages dynamic WAM redirect URIs via `HttpContext.Items`.
- Extracts and decodes claims from the ID token after successful authentication.
- Provides a `TokenHelper` utility for access token and ID token validation.
- Defines the `TokenEmpInfo` model to represent user identity information.
- Supports safe access to authentication context without static state.

## Target Framework

- .NET Framework 4.7.2 (Web Forms)

## Typical Use Case

You can use this library in ASP.NET Web Forms applications that need to:

- Redirect unauthenticated users to WAM via OWIN.
- Read the authenticated user's identity from the decoded ID token.
- Store identity info in a safe, per-request or per-session context (`TokenEmpInfo`).
- Avoid writing authentication logic manually in every `.aspx` page.

## Installation

Include the library project in your solution or add the DLL to your Web Forms application.

### Dependencies

The following packages must be installed in the consuming application:

```xml
<PackageReference Include="Microsoft.Owin" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Host.SystemWeb" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.Cookies" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.OpenIdConnect" Version="4.2.2" />



/// <summary>
/// Helper class for working with OAuth/OpenID Connect tokens and authentication state.
/// Provides methods to access the ID token and access token, validate authentication,
/// and extract claims from the decoded ID token.
/// </summary>
public static class TokenHelper
{
    /// <summary>
    /// Retrieves the raw ID token from the authenticated user's claims.
    /// Returns null if the user is not authenticated.
    /// </summary>
    /// <returns>The ID token as a string, or null if not available.</returns>
    private static string GetIdToken()
    {
        if (!IsUserAuthenticated()) return null;

        var identity = HttpContext.Current.GetOwinContext().Authentication.User.Identity as ClaimsIdentity;
        return identity?.FindFirst("id.token")?.Value;
    }

    /// <summary>
    /// Retrieves the raw access token from the authenticated user's claims.
    /// Returns null if the user is not authenticated.
    /// </summary>
    /// <returns>The access token as a string, or null if not available.</returns>
    private static string GetAccessToken()
    {
        if (!IsUserAuthenticated()) return null;

        var identity = HttpContext.Current.GetOwinContext().Authentication.User.Identity as ClaimsIdentity;
        return identity?.FindFirst("access.token")?.Value;
    }

    /// <summary>
    /// Checks if the current user is authenticated.
    /// </summary>
    /// <returns>True if the user is authenticated, false otherwise.</returns>
    public static bool IsUserAuthenticated()
    {
        return HttpContext.Current.GetOwinContext().Authentication.User.Identity.IsAuthenticated;
    }

    /// <summary>
    /// Checks if the current authenticated user has a valid ID token.
    /// </summary>
    /// <returns>True if a non-empty ID token is available, false otherwise.</returns>
    public static bool HasValidIdToken()
    {
        return !string.IsNullOrEmpty(GetIdToken());
    }

    /// <summary>
    /// Checks if the current authenticated user has a valid access token.
    /// </summary>
    /// <returns>True if a non-empty access token is available, false otherwise.</returns>
    public static bool HasValidAccessToken()
    {
        return !string.IsNullOrEmpty(GetAccessToken());
    }

    /// <summary>
    /// Extracts the value of a specific claim from the decoded ID token.
    /// </summary>
    /// <param name="claimType">The name/type of the claim to extract.</param>
    /// <returns>The value of the claim, or null if not found or token is missing.</returns>
    private static string GetClaimFromIdToken(string claimType)
    {
        string idToken = GetIdToken();

        if (string.IsNullOrEmpty(idToken))
            return null;

        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(idToken);

        return token.Claims.FirstOrDefault(c => c.Type == claimType)?.Value;
    }

    /// <summary>
    /// Extracts the "sub" (subject) claim from the decoded ID token.
    /// This is typically the unique identifier of the user.
    /// </summary>
    /// <returns>The value of the "sub" claim, or null if not found.</returns>
    public static string GetSub()
    {
        return GetClaimFromIdToken("sub");
    }
}


/// <summary>
/// Represents the authenticated user's identity information extracted from the ID token
/// in an OAuth/OpenID Connect authentication flow.
/// 
/// This class is typically populated after successful login via WAM (Web Access Manager),
/// and contains selected claims used across the application to identify the user.
/// </summary>

/// <summary>
/// Base class for ASP.NET Web Forms pages that enforces OAuth authentication
/// and manages user identity information obtained from the ID token.
/// 
/// This class checks if the user is authenticated during the page lifecycle (`OnInit`).
/// If the user has a valid token, it populates the `TokenEmpInfo` object with the subject (`sub`).
/// Otherwise, it redirects the user to WAM (Web Access Manager) using the OWIN authentication pipeline.
/// 
/// A custom redirect URI is dynamically retrieved from `HttpContext.Items["CustomRedirectUri"]`
/// to support multi-tenant or path-specific authentication flows.
/// </summary>
public class AuthPage : System.Web.UI.Page
{
    /// <summary>
    /// The redirect URI to be used for WAM authentication.
    /// This is typically determined dynamically based on the request context.
    /// </summary>
    public string redirectUri;

    /// <summary>
    /// Represents the current authenticated user's identity, populated from token claims.
    /// This object is initialized during OnInit after a successful authentication check.
    /// </summary>
    public TokenEmpInfo TokenEmpInfo { get; set; }

    /// <summary>
    /// Handles the page initialization lifecycle event.
    /// If the user is authenticated and a valid ID token is present, the user info is loaded into TokenEmpInfo.
    /// Otherwise, redirects the user to the WAM authentication flow.
    /// </summary>
    /// <param name="e">Event arguments.</param>
    protected override void OnInit(EventArgs e)
    {
        try
        {
            if (TokenHelper.IsUserAuthenticated())
            {
                if (TokenHelper.HasValidIdToken())
                {
                    TokenEmpInfo = new TokenEmpInfo();
                    TokenEmpInfo.Sub = TokenHelper.GetSub();
                    base.OnInit(e);
                    return;
                }
                else
                {
                    throw new Exception("Missing Token");
                }
            }
            else
            {
                RedirectToWAM();
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    /// <summary>
    /// Handles the page load lifecycle event.
    /// Ensures authentication has occurred before continuing the load process.
    /// </summary>
    /// <param name="e">Event arguments.</param>
    protected override void OnLoad(EventArgs e)
    {
        if (TokenHelper.IsUserAuthenticated())
        {
            base.OnLoad(e);
        }
    }

    /// <summary>
    /// Redirects the user to the Web Access Manager (WAM) for authentication using OWIN's challenge flow.
    /// Retrieves the redirect URI from HttpContext.Items["CustomRedirectUri"].
    /// Throws an error if the redirect URI is not set.
    /// </summary>
    public void RedirectToWAM()
    {
        try
        {
            var httpContext = HttpContext.Current;
            redirectUri = httpContext?.Items["CustomRedirectUri"] as string;

            if (string.IsNullOrEmpty(redirectUri))
            {
                throw new InvalidOperationException("Missing redirectUri");
            }

            HttpContext.Current.GetOwinContext().Authentication.Challenge(
                new AuthenticationProperties
                {
                    RedirectUri = redirectUri,
                    AllowRefresh = true,
                    IsPersistent = true
                },
                OpenIdConnectAuthenticationDefaults.AuthenticationType
            );

            HttpContext.Current.Response.StatusCode = 401;
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
}



/// <summary>
/// Provides a static context to store user identity information (claims) extracted from the ID token
/// during the OpenID Connect authentication flow.
/// 
/// This information is typically populated after successful authentication and is used across the application
/// to identify the logged-in employee and personalize the user experience.
/// </summary>


/// <summary>
/// Redirects the current request to the Web Access Manager (WAM) login endpoint.
/// Uses OWIN’s `Authentication.Challenge` method to initiate the authentication flow.
/// 
/// Retrieves the redirect URI from the current HTTP context's `Items` collection using the key "CustomRedirectUri".
/// This value is typically set earlier in the request lifecycle (for example, during `Application_BeginRequest` or overridden in OnInit)
/// to dynamically control which URL the user should return to after authentication.
/// 
/// Throws an exception if the redirect URI is missing or an error occurs during redirection.
/// </summary>
/// <exception cref="InvalidOperationException">Thrown if redirectUri is missing or an error occurs during redirection.</exception>
public void RedirectToWAM()
{
    try
    {
        var httpContext = HttpContext.Current;
        // Retrieves a dynamically set redirect URI for this request, allowing multi-tenant or multi-path flexibility.
        redirectUri = httpContext?.Items["CustomRedirectUri"] as string;

        if (string.IsNullOrEmpty(redirectUri))
        {
            throw new InvalidOperationException("Missing redirectUri");
        }

        HttpContext.Current.GetOwinContext().Authentication.Challenge(
            new AuthenticationProperties
            {
                RedirectUri = redirectUri,
                AllowRefresh = true,
                IsPersistent = true
            },
            OpenIdConnectAuthenticationDefaults.AuthenticationType
        );

        HttpContext.Current.Response.StatusCode = 401;
        HttpContext.Current.ApplicationInstance.CompleteRequest();
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException(ex.Message);
    }
}



/// <summary>
/// Base page class for ASP.NET Web Forms that handles OAuth authentication via WAM (Web Access Manager).
/// 
/// This class intercepts the initialization and loading of the page to ensure the user is authenticated.
/// If the user is not authenticated or lacks a valid ID token, they are redirected to WAM using OWIN middleware.
/// 
/// Extracts the `sub` (subject) claim from the ID token and stores it in a shared token context (`TokenEmpinfo.Sub`).
/// </summary>
public class AuthPage : System.Web.UI.Page
{
    /// <summary>
    /// Stores the redirect URI used for WAM authentication.
    /// This is typically set during the request lifecycle and passed to OWIN's Challenge call.
    /// </summary>
    public string redirectUri;

    /// <summary>
    /// Overrides the page's initialization logic to check for authentication.
    /// If the user has a valid ID token, extracts the subject (`sub`) and continues initialization.
    /// Otherwise, initiates a redirect to WAM.
    /// </summary>
    /// <param name="e">Standard EventArgs for page lifecycle.</param>
    protected override void OnInit(EventArgs e)
    {
        try
        {
            if (TokenHelper.IsUserAuthenticated())
            {
                if (TokenHelper.HasValidIdToken())
                {
                    TokenEmpinfo.Sub = TokenHelper.GetSub();
                    base.OnInit(e);
                    return;
                }
                else
                {
                    throw new Exception("Missing Token");
                }
            }
            else
            {
                RedirectToWAM();
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    /// <summary>
    /// Optionally processes logic during page load. Placeholder for further customization.
    /// Still calls base implementation to preserve normal page lifecycle behavior.
    /// </summary>
    /// <param name="e">Standard EventArgs for page lifecycle.</param>
    protected override void OnLoad(EventArgs e)
    {
        if (TokenHelper.IsUserAuthenticated())
        {
            // Additional logic can be added here if needed
        }

        base.OnLoad(e);
    }

    /// <summary>
    /// Redirects the current request to the Web Access Manager (WAM) login endpoint.
    /// Uses OWIN’s `Authentication.Challenge` method to initiate the authentication flow.
    /// </summary>
    /// <exception cref="InvalidOperationException">Thrown if redirectUri is missing or an error occurs during redirection.</exception>
    public void RedirectToWAM()
    {
        try
        {
            var httpContext = HttpContext.Current;
            redirectUri = httpContext?.Items["CustomRedirectUri"] as string;

            if (string.IsNullOrEmpty(redirectUri))
            {
                throw new InvalidOperationException("Missing redirectUri");
            }

            HttpContext.Current.GetOwinContext().Authentication.Challenge(
                new AuthenticationProperties
                {
                    RedirectUri = redirectUri,
                    AllowRefresh = true,
                    IsPersistent = true
                },
                OpenIdConnectAuthenticationDefaults.AuthenticationType
            );

            HttpContext.Current.Response.StatusCode = 401;
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
}





# OwinOAuthLib

## Overview

**OwinOAuthLib** is a .NET Standard 2.0 library designed to simplify the configuration of **OAuth 2.0** and **OpenID Connect (OIDC)** authentication for ASP.NET applications using **OWIN**.  
It provides a clean abstraction to configure authentication middleware, manage cookie-based authentication, and handle key OpenID Connect events, including token validation and error handling.

This library is intended for applications running **.NET Framework 4.7.2** with OWIN-based middleware.

## Key Features

- Simplifies OAuth 2.0 / OIDC configuration for OWIN.
- Sets up **cookie-based authentication**.
- Automatically registers OpenID Connect event handlers:
  - Redirect to identity provider.
  - Security token validated.
  - Authentication failed.
- Exposes an event override for `RedirectToIdentityProvider`.
- Provides centralized storage for authentication properties (`AuthProperties`).
- Performs required parameter validation to prevent misconfiguration.

## Target Framework

- .NET Standard 2.0

## Typical Use Case

The library is used in **ASP.NET Web Forms** or **ASP.NET MVC** applications (.NET Framework 4.7.2) that require secure authentication with:
- **OpenID Connect** providers.
- **Web Access Manager (WAM)** integrations.

It streamlines setting up the OWIN pipeline without repetitive boilerplate code.

## Installation

Add a reference to the `OwinOAuthLib` project or include it as a library in your solution.

Install the following NuGet packages in the consuming application:

```xml
<PackageReference Include="Microsoft.Owin" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Host.SystemWeb" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.Cookies" Version="4.2.2" />
<PackageReference Include="Microsoft.Owin.Security.OpenIdConnect" Version="4.2.2" />

## Configuration Example

In your application’s `Startup.cs` or `Startup.Auth.cs`:

```csharp
using OwinOAuthLib;

public void Configuration(IAppBuilder app)
{
    AuthConfig.ConfigureAuth(
        app,
        ClientId: "your-client-id",
        ClientSecret: "your-client-secret",
        BaseUrl: "https://your-authority.com",
        RedirectUri: "https://your-app.com/signin-oidc"
    );
}

## How It Works

### Validation
All required OAuth parameters (`ClientId`, `ClientSecret`, `BaseUrl`, `RedirectUri`) are validated at startup.

### Cookie Authentication
Registers OWIN’s `CookieAuthenticationOptions` for session management.

### OpenID Connect Authentication
Registers OWIN’s `OpenIdConnectAuthenticationOptions` with:

- **ResponseType** set to `CodeIdToken`.
- **Scope** includes `openid` and `profile`.
- Standard notification handlers:
  - `RedirectToIdentityProvider`
  - `SecurityTokenValidated`
  - `AuthenticationFailed`

### Token Claims
Adds the **ID token** and **Access token** as claims to the authenticated user’s identity for later use.

### Override Support
If needed, the `OwinEvents.OnRedirectToIdentityProviderOverride` delegate can be assigned in the application to customize the redirect URI logic dynamically.

## Library Structure

| Class            | Purpose                                                   |
|------------------|-----------------------------------------------------------|
| `AuthConfig`     | Configures OWIN authentication pipeline.                  |
| `AuthProperties` | Stores reusable authentication parameters.                |
| `OwinEvents`     | Provides an event hook for `RedirectToIdentityProvider`.  |
| `ValidationHelper` | Ensures required parameters are provided at runtime.     |

## Dependencies

| NuGet Package                          | Version |
|---------------------------------------|---------|
| Microsoft.Owin                         | 4.2.2   |
| Microsoft.Owin.Host.SystemWeb         | 4.2.2   |
| Microsoft.Owin.Security               | 4.2.2   |
| Microsoft.Owin.Security.Cookies       | 4.2.2   |
| Microsoft.Owin.Security.OpenIdConnect | 4.2.2   |

## Security Considerations

### Token Security
Tokens (**ID token** and **Access token**) are added as claims but should be handled carefully in downstream code to avoid logging or exposing sensitive information.

### Parameter Validation
The library enforces required parameter validation to prevent runtime errors caused by missing or misconfigured values.

## Limitations

- Designed for ASP.NET applications using **OWIN** middleware.
- Assumes the consuming application handles secure storage of client secrets and other sensitive values (recommended via Azure Key Vault or equivalent).



/// <summary>
/// Provides a mechanism to override the default behavior of the
/// RedirectToIdentityProvider event in the authentication flow.
/// </summary>
public static class OwinEvents
{
    /// <summary>
    /// Allows customization of the RedirectToIdentityProvider event by assigning a delegate.
    /// </summary>
    public static Func<RedirectToIdentityProviderNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> OnRedirectToIdentityProviderOverride;
}


/// <summary>
/// Stores authentication properties such as client credentials, authority,
/// and redirect URIs. Used by the OAuth/OIDC configuration.
/// </summary>
public static class AuthProperties
{
    public static string ClientId { get; set; }
    public static string ClientSecret { get; set; }
    public static string BaseUrl { get; set; }
    public static string Authorize { get; set; }
    public static string RedirectUri { get; set; }
    public static string IdTokenEndpoint { get; set; }
    public static string PostLogoutRedirectUri { get; set; }
    public static int ExpireTimeSpan { get; set; }
}


/// <summary>
/// Provides validation methods to ensure required values are present.
/// </summary>
internal static class ValidationHelper
{
    /// <summary>
    /// Validates that a required string value is not null or whitespace.
    /// Throws an ArgumentException if validation fails.
/// </summary>
/// <param name="value">The value to validate.</param>
/// <param name="paramName">The name of the parameter being validated.</param>
/// <param name="errorMessage">Optional custom error message.</param>
    public static void ValidateRequired(string value, string paramName, string errorMessage = null)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentException(errorMessage ?? $"Missing required field: {paramName}", paramName);
        }
    }
}



/// <summary>
/// Provides methods to configure OAuth and OpenID Connect authentication
/// for the OWIN middleware pipeline. Sets up cookie authentication and
/// OpenID Connect handlers with customizable events.
/// </summary>
public class AuthConfig
{
    /// <summary>
    /// Configures OAuth and OIDC authentication using the provided client credentials,
    /// base URL, and redirect URI. Sets up cookie authentication and OpenID Connect options,
    /// including event handlers for redirect, token validation, and authentication failures.
    /// </summary>
    /// <param name="app">The OWIN application builder.</param>
    /// <param name="ClientId">OAuth client identifier.</param>
    /// <param name="ClientSecret">OAuth client secret.</param>
    /// <param name="BaseUrl">The authority URL (WAM or identity provider base URL).</param>
    /// <param name="RedirectUri">The redirect URI for the authentication flow.</param>
    public static void ConfigureAuth(IAppBuilder app, string ClientId, string ClientSecret, string BaseUrl, string RedirectUri)
    {
        ValidationHelper.ValidateRequired(ClientId, nameof(ClientId));
        ValidationHelper.ValidateRequired(BaseUrl, nameof(BaseUrl));
        ValidationHelper.ValidateRequired(ClientSecret, nameof(ClientSecret));
        ValidationHelper.ValidateRequired(RedirectUri, nameof(RedirectUri));

        AuthProperties.ClientId = ClientId;
        AuthProperties.ClientSecret = ClientSecret;
        AuthProperties.BaseUrl = BaseUrl;
        AuthProperties.RedirectUri = RedirectUri;

        app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);

        app.UseCookieAuthentication(new CookieAuthenticationOptions
        {
            CookieSameSite = SameSiteMode.None,
            CookieManager = new SystemWebCookieManager()
        });

        app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
        {
            ClientId = AuthProperties.ClientId,
            ClientSecret = AuthProperties.ClientSecret,
            Authority = AuthProperties.BaseUrl,
            RedirectUri = AuthProperties.RedirectUri,
            ResponseType = OpenIdConnectResponseType.CodeIdToken,
            Scope = "openid profile",
            CookieManager = new SystemWebCookieManager(),
            Notifications = new OpenIdConnectAuthenticationNotifications
            {
                RedirectToIdentityProvider = OnRedirectToIdentityProvider,
                SecurityTokenValidated = OnSecurityTokenValidated,
                AuthenticationFailed = OnAuthenticationFailed
            }
        });
    }

    /// <summary>
    /// Event handler for the redirect to the identity provider.
    /// Allows overriding the redirect URI dynamically if required.
    /// </summary>
    private static Task OnRedirectToIdentityProvider(RedirectToIdentityProviderNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
    {
        if (OwinEvents.OnRedirectToIdentityProviderOverride != null)
        {
            return OwinEvents.OnRedirectToIdentityProviderOverride.Invoke(context);
        }

        string redirectUri =
            context.OwinContext?.Authentication?.AuthenticationResponseChallenge?.Properties?.RedirectUri;

        if (!string.IsNullOrEmpty(redirectUri))
        {
            context.ProtocolMessage.RedirectUri = redirectUri;
        }

        return Task.CompletedTask;
    }

    /// <summary>
    /// Event handler triggered when the security token has been validated.
    /// Adds the ID token and access token as claims to the authenticated identity.
    /// </summary>
    private static Task OnSecurityTokenValidated(SecurityTokenValidatedNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
    {
        var idToken = context.ProtocolMessage.IdToken;
        var accessToken = context.ProtocolMessage.AccessToken;

        var claimsIdentity = context.AuthenticationTicket.Identity;

        if (!string.IsNullOrEmpty(idToken))
        {
            claimsIdentity.AddClaim(new System.Security.Claims.Claim("id.token", idToken));
        }

        if (!string.IsNullOrEmpty(accessToken))
        {
            claimsIdentity.AddClaim(new System.Security.Claims.Claim("access.token", accessToken));
        }

        return Task.CompletedTask;
    }

    /// <summary>
    /// Event handler triggered when authentication fails.
    /// Redirects the user to an error page with the exception message.
    /// </summary>
    private static async Task OnAuthenticationFailed(AuthenticationFailedNotification<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions> context)
    {
        context.HandleResponse();
        context.Response.Redirect("/error?message=" + Uri.EscapeDataString(context.Exception.Message));
    }
}



### Required NuGet Libraries and Versions

The following libraries and versions are required for correct functionality:

| Library                                         | Version       |
|-------------------------------------------------|---------------|
| Microsoft.IdentityModel.Tokens                  | 8.8.0.0       |
| Microsoft.IdentityModel.Protocols.OpenIdConnect | 5.3.0.0       |
| BouncyCastle.Cryptography                       | 2.0.0.0       |
| BouncyCastle.Crypto                             | 1.8.9.0       |
| Microsoft.Owin                                  | 4.2.2.0       |
| Microsoft.Owin.Host.System.Web                  | 4.2.2.0       |
| Microsoft.Owin.Security                         | 4.2.2.0       |
| Microsoft.Owin.Security.Cookies                 | 4.2.2.0       |
| Microsoft.Owin.Security.OpenIdConnect           | 4.2.2.0       |
| Owin                                           | 1.0.0.0       |
| System.IdentityModel.Tokens.Jwt                 | 8.8.0.0       |
| System.Text.Json                                | 9.0.0.3       |
| Azure.Core                                     | 1.44.1.0      |
| Azure.Identity                                 | 1.13.2.0      |
| Azure.Security.KeyVault.Secrets                 | 4.7.0.0       |


# OAuth Authentication Implementation — ASP.NET Web Forms (.NET Framework 4.7.2)

## Overview

This project implements **OAuth 2.0** authentication and **OpenID Connect (OIDC)** in an ASP.NET Web Forms application targeting **.NET Framework 4.7.2**.  
The solution authenticates users through a Web Access Manager (WAM) and leverages cookies to maintain authentication state. It also retrieves user data from an external HR API post-authentication.

## Key Features

- OAuth 2.0 / OIDC-based authentication.
- Cookie-based authentication for session management.
- Integration with **Web Access Manager (WAM)** for login and token acquisition.
- Secure retrieval of secrets from **Azure Key Vault (AKV)**.
- User data extraction from tokens.
- Retrieval of detailed employee information via HRAPI.
- Structured logging with **Serilog**.

## Versions & Libraries

| Component                    | Version                      | Notes |
|------------------------------|------------------------------|-------|
| .NET Framework               | 4.7.2                        |       |
| Owin                         | 4.2.2 (SystemWeb)            |       |
| OwinOAuth                    | .NET Standard 2.0            | OAuth/OIDC configuration |
| AspOwin                      | .NET Standard 2.0            | WAM redirection and user data extraction |
| CryptoPGP                    | .NET Standard 2.0            | Queries Azure Key Vault for secrets |
| HRAPILib                     | .NET Standard 2.0            | Retrieves employee information from HR API |
| Serilog                      | 2.x                          | Logging |

## Architectural Decisions

- **Cookie Authentication**  
  Chosen to manage session state in a way compatible with Web Forms and scalable for enterprise usage.

- **OwinOAuth Library**  
  Provides the abstraction for OAuth and OIDC setup, reusable across projects.

- **AspOwin Library**  
  Handles WAM redirection and extracts essential user data (claims) from the authentication token to support personalized and secure sessions.

- **CryptoPGP Library**  
  Retrieves sensitive configuration data (client IDs, secrets, private keys) securely from Azure Key Vault. Keeps secrets out of the application code and configuration files.

- **HRAPILib**  
  Queries the HRAPI to retrieve comprehensive employee information based on the authenticated user's identifier.

- **Serilog & Custom Logging Middleware**  
  Enables structured and consistent logging throughout the application for better traceability and troubleshooting.

## Authentication Flow Summary

1. **Unauthenticated Request**  
   User accesses a protected resource. The app triggers redirection to WAM using **AspOwin**.

2. **User Authentication via WAM**  
   The user logs in through WAM. Upon success, WAM redirects back to the application with an OAuth/OIDC token.

3. **Token Validation & Claim Extraction**  
   **OwinOAuth** validates the token. **AspOwin** extracts essential user data (claims) from the token payload.

4. **Authentication Cookie Creation**  
   A secure cookie is created to persist the authenticated session.

5. **User Data Retrieval from HRAPI**  
   The application calls **HRAPILib** to fetch full employee profile data using the user identifier extracted from the token.

6. **Session Continuation**  
   On subsequent requests, the authentication cookie is validated to maintain the user session without re-authentication.

## Folder Structure (Key Components)

```plaintext
/App_Start
    Startup.cs            // Configures OWIN, OAuth, and Serilog

/Helpers
    LogHelper.cs          // Structured logging helper

/Middleware
    LoggingMiddleware.cs  // Logs HTTP request/response data

/Security
    AuthConfig.cs         // OAuth and OIDC configuration

/Models
    EmpInfo.cs            // Employee profile model

/Libraries
    OwinOAuth (.NET Standard 2.0)
    AspOwin (.NET Standard 2.0)
    CryptoPGP (.NET Standard 2.0)
    HRAPILib (.NET Standard 2.0)



# OAuth Authentication Implementation — ASP.NET Web Forms (.NET Framework 4.7.2)

## Overview

This project implements **OAuth 2.0** authentication and **OpenID Connect (OIDC)** in an ASP.NET Web Forms application targeting **.NET Framework 4.7.2**. The solution authenticates users through a Web Access Manager (WAM) and leverages cookies to manage authentication state throughout the application.

## Key Features

- OAuth 2.0 / OIDC-based authentication.
- Cookie-based authentication management.
- Integration with **Web Access Manager (WAM)** for user login and redirection.
- Secure storage of client credentials and secrets using **Azure Key Vault (AKV)**.
- Logging implemented via **Serilog** and a custom `LogHelper`.

## Versions & Libraries

| Component                    | Version                      |
|------------------------------|------------------------------|
| .NET Framework               | 4.7.2                        |
| Owin                         | 4.2.2 (hosted in SystemWeb) |
| OwinOAuth (custom library)   | .NET Standard 2.0           |
| AspOwin (custom library)     | .NET Standard 2.0           |
| Serilog                      | 2.x                          |

> **Note:** `OwinOAuth` handles the OAuth and OIDC authentication configuration.  
> `AspOwin` is responsible for managing the redirection to WAM during the login flow.

## Architectural Decisions

- **Cookie Authentication:**  
  Chosen to maintain user session and state post-authentication in a scalable and standard-compliant way compatible with ASP.NET Web Forms.

- **OwinOAuth Library:**  
  Created to abstract the complexity of configuring OAuth and OIDC in a reusable manner compatible with .NET Standard 2.0, easing integration in future apps.

- **AspOwin Library:**  
  Handles WAM-specific redirections, decoupling environment-specific login mechanisms from the main application code.

- **Azure Key Vault (AKV):**  
  Used to securely store client IDs, secrets, and cryptographic keys, minimizing sensitive data exposure in code and configuration files.

## Flow Summary

1. **Unauthenticated Request:**  
   When a user requests a protected resource, the app redirects them to WAM for authentication using `AspOwin`.

2. **WAM Authentication:**  
   The user logs in via WAM. Upon success, WAM redirects back to the app with tokens.

3. **Token Handling & Cookie Creation:**  
   `OwinOAuth` validates the token and creates an authentication cookie to persist the user session.

4. **Session Continuation:**  
   On subsequent requests, the authentication cookie is validated, allowing seamless session continuity without re-authentication.

## Folder Structure (Key Components)

```plaintext
/App_Start
    Startup.cs            // Configures OWIN, OAuth, and Serilog

/Helpers
    LogHelper.cs          // Structured logging helper

/Middleware
    LoggingMiddleware.cs  // Logs incoming and outgoing HTTP traffic

/Security
    AuthConfig.cs         // OAuth and OIDC configuration

/Models
    EmpInfo.cs            // Employee profile model




/// <summary>
/// Determines the language code based on the employee's preferred language string.
/// Supports recognition of "English", "en_US", "French", and "fr_FR".
/// Defaults to English ("en") if the preferred language is null, empty, or unrecognized.
/// </summary>
/// <param name="EmpPreferredLanguage">The preferred language string from the employee profile.</param>
/// <returns>
/// A language code string: "en" for English or "fr" for French.
/// </returns>




/// <summary>
/// Initializes the page and determines the appropriate authentication redirect URI based on the incoming request's host and path.
/// Evaluates headers and URL patterns to select the correct WAM (Web Access Manager) endpoint for the authentication flow.
/// If no valid redirect URI is found, writes an error message and terminates the response.
/// 
/// The selected redirect URI is stored in the current HTTP context items collection under the key "CustomRedirectUri".
/// </summary>
/// <param name="e">Event arguments associated with the OnInit event.</param>



/// <summary>
/// Represents the basic employee information retrieved from HRAPI or the database.
/// This class contains profile details for the employee who has logged into the application.
/// </summary>


/// <summary>
/// Provides access to secret configuration values stored in Azure Key Vault (AKV).
/// Implements lazy initialization to ensure secrets are loaded only once and on demand.
/// 
/// Secrets retrieved include:
/// - Client IDs and secrets for HRAPI and WAM authentication flows
/// - The HRAPI private key in PEM format
/// 
/// Secrets are retrieved via CryptoManager and decoded if necessary (e.g., PEM key in Base64).
/// Logging is used to trace secret loading operations and detect failures.
/// </summary>


/// <summary>
/// Custom OWIN middleware that logs incoming HTTP requests and outgoing HTTP responses.
/// Captures method, URI, headers, and response status for troubleshooting and auditing purposes.
/// Uses a structured logging helper (LogHelper) to record debug-level logs.
/// </summary>

    /// <summary>
    /// Initializes a new instance of the <see cref="LoggingMiddleware"/> class.
    /// </summary>
    /// <param name="next">The next middleware component in the OWIN pipeline.</param>




    /// <summary>
    /// Processes an incoming HTTP request and an outgoing HTTP response.
    /// Logs request method, URI, request headers, response status code, and response headers.
    /// </summary>
    /// <param name="context">The OWIN context containing the HTTP request and response information.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>





/// <summary>
/// Provides a helper utility for structured logging using Serilog.
/// Defines log levels and formats log messages consistently across the application.
/// </summary>



    /// <summary>
    /// Defines the available log severity levels for application logging.
    /// </summary>



    /// <summary>
    /// Logs a formatted message to Serilog based on the specified log level.
    /// The message includes optional environment and identifier information for better traceability.
    /// </summary>
    /// <param name="message">The main log message to be recorded.</param>
    /// <param name="environment">Optional. The environment or context where the log is generated (e.g., Development, Production).</param>
    /// <param name="id">Optional. An identifier associated with the log entry, such as a request ID or operation ID.</param>
    /// <param name="level">The severity level of the log. Defaults to Informational if not specified.</param>



/// <summary>
/// Retrieves basic employee information from the database based on the provided employee ID (empid).
/// Connects to the appropriate environment-specific database, executes a query against the LWS_Emp_Basic table,
/// and maps selected fields into an <see cref="Empinfo"/> object.
/// 
/// In case of a database connection or query error, writes an error message to the response and terminates the request.
/// </summary>
/// <param name="empid">The employee ID (ScotiaID) used to search for the employee's information in the database.</param>
/// <returns>
/// An <see cref="Empinfo"/> object containing selected employee details, or null if no record is found or an error occurs.
/// </returns>


/// <summary>
/// Validates that the employee token (TokenEmpinfo) contains the required employee identifier (Sub).
/// If the identifier is missing, sends an error message to the client and terminates the response.
/// </summary>


/// <summary>
/// Validates that the retrieved employee information from HRAPI is not null and contains a valid employee number.
/// If validation fails, sends an error message to the client and terminates the response.
/// </summary>
/// <param name="empinfo">The employee information response object to validate.</param>

/// <summary>
/// Determines the language code based on the employee's preferred language.
/// Defaults to English if the preferred language is not set or unrecognized.
/// </summary>
/// <param name="empPreferredLanguage">The employee's preferred language as a string.</param>
/// <returns>
/// A language code string (e.g., "en" for English or "fr" for French).
/// </returns>


/// <summary>
/// Retrieves employee information from the HRAPI service.
/// 
/// Initializes and configures HRAPI client properties from AppSettings and Azure Key Vault.
/// Validates the access token before making the API call and ensures the received employee data is valid.
/// 
/// In case of any failure during the process, logs the error and returns a user-friendly message
/// to the client, terminating the response.
/// </summary>
/// <returns>
/// An <see cref="EmpinfoHRApiResponse"/> object containing the employee information,
/// or null if an error occurs.
/// </returns>


/// <summary>
/// Handles the BeginRequest event for each incoming HTTP request.
/// Based on the request URL, dynamically updates the authentication redirect URI
/// used in the OAuth/OpenID Connect flow to point to the correct WAM (Web Access Manager) endpoint.
/// 
/// Reads route prefixes and redirect URIs from AppSettings configuration.
/// This logic ensures the application redirects users to the appropriate authentication flow
/// depending on the access path (e.g., HR Passport or Scotiaworld).
/// </summary>
/// <param name="sender">The source of the event.</param>
/// <param name="e">The EventArgs instance containing the event data.</param>
protected void Application_BeginRequest(object sender, EventArgs e)
{
    var context = HttpContext.Current;
    string path = context?.Request?.Url?.ToString();

    if (path != null)
    {
        string appRoutePrefixHRPassport = ConfigurationManager.AppSettings["AppRoute_Prefix_HRPassport"];
        string appRoutePrefixScotiaworld = ConfigurationManager.AppSettings["AppRoute_Prefix_Scotiaworld"];
        string wamRedirectUri = ConfigurationManager.AppSettings["WamRedirectUri"];
        string wamScotiaWorldRedirectUri = ConfigurationManager.AppSettings["WamScotiaWorldRedirectUri"];

        if (path.Contains(appRoutePrefixHRPassport))
        {
            AuthProperties.RedirectUri = wamRedirectUri;
        }
        else if (path.Contains(appRoutePrefixScotiaworld))
        {
            AuthProperties.RedirectUri = wamScotiaWorldRedirectUri;
        }
    }
}


/// <summary>
    /// Startup class responsible for configuring the authentication pipeline for the application.
    /// Initializes logging, retrieves configuration values, fetches secrets from Azure Key Vault,
    /// and sets up OAuth and OpenID Connect authentication by redirecting users to WAM (Web Access Manager).
    /// </summary>


/// <summary>
        /// Configures the OWIN middleware pipeline.
        /// This includes setting up Serilog for logging, fetching authentication secrets from Key Vault,
        /// and configuring OAuth/OIDC authentication through the external WAM provider.
        /// 
        /// It uses ASP.NET OWIN libraries to implement cookie-based authentication as part of the OAuth/OpenID Connect flow.
        /// </summary>
        /// <param name="app">The OWIN application builder used to configure middleware components.</param>
