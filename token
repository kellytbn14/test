using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Web;

public static class TokenHelper
{
    /// <summary>
    /// Obtiene el ID Token desde los claims del usuario autenticado.
    /// </summary>
    public static string GetIdToken()
    {
        var identity = HttpContext.Current.GetOwinContext().Authentication.User.Identity as ClaimsIdentity;
        return identity?.FindFirst("id_token")?.Value;
    }

    /// <summary>
    /// Obtiene el Access Token desde los claims del usuario autenticado.
    /// </summary>
    public static string GetAccessToken()
    {
        var identity = HttpContext.Current.GetOwinContext().Authentication.User.Identity as ClaimsIdentity;
        return identity?.FindFirst("access_token")?.Value;
    }

    /// <summary>
    /// Decodifica el ID Token y obtiene el valor de un claim específico.
    /// </summary>
    public static string GetClaimFromIdToken(string claimType)
    {
        string idToken = GetIdToken();
        if (string.IsNullOrEmpty(idToken))
            return null;

        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(idToken);

        return token.Claims.FirstOrDefault(c => c.Type == claimType)?.Value;
    }

    /// <summary>
    /// Obtiene el ID único del usuario (sub).
    /// </summary>
    public static string GetUserId()
    {
        return GetClaimFromIdToken("sub");
    }

    /// <summary>
    /// Obtiene el nombre del usuario.
    /// </summary>
    public static string GetUserName()
    {
        return GetClaimFromIdToken("name");
    }

    /// <summary>
    /// Obtiene el correo del usuario.
    /// </summary>
    public static string GetUserEmail()
    {
        return GetClaimFromIdToken("email");
    }

    /// <summary>
    /// Obtiene el idioma (locale) del usuario.
    /// </summary>
    public static string GetUserLocale()
    {
        return GetClaimFromIdToken("locale");
    }
}



app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions
{
    ClientId = AuthProperties.ClientId,
    ClientSecret = AuthProperties.ClientSecret,
    Authority = AuthProperties.BaseUrl,
    RedirectUri = AuthProperties.RedirectUri,
    ResponseType = OpenIdConnectResponseType.CodeIdToken,
    Scope = "openid profile email",
    Notifications = new OpenIdConnectAuthenticationNotifications
    {
        SecurityTokenValidated = context =>
        {
            var idToken = context.ProtocolMessage.IdToken;
            var accessToken = context.ProtocolMessage.AccessToken;

            if (!string.IsNullOrEmpty(idToken))
            {
                var claimsIdentity = context.AuthenticationTicket.Identity;
                claimsIdentity.AddClaim(new System.Security.Claims.Claim("id_token", idToken));
            }

            if (!string.IsNullOrEmpty(accessToken))
            {
                var claimsIdentity = context.AuthenticationTicket.Identity;
                claimsIdentity.AddClaim(new System.Security.Claims.Claim("access_token", accessToken));
            }

            return Task.CompletedTask;
        }
    }
});



using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Web;

public partial class Default : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        string idToken = HttpContext.Current.GetOwinContext().Authentication.User.FindFirst("id_token")?.Value;

        if (!string.IsNullOrEmpty(idToken))
        {
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(idToken);

            // Obtener el "sub" (ID del usuario)
            var userId = token.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;

            // Obtener el "locale" (Idioma del usuario)
            var userLocale = token.Claims.FirstOrDefault(c => c.Type == "locale")?.Value;

            // Mostrar los valores en la página
            lblUserId.Text = userId ?? "ID de usuario no encontrado";
            lblUserLocale.Text = userLocale ?? "Idioma no encontrado";
        }
        else
        {
            lblUserId.Text = "ID Token no disponible.";
            lblUserLocale.Text = "Idioma no disponible.";
        }
    }
}
