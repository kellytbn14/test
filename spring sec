package com.bos.unison.wfsextapi.controller;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.Optional;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @GetMapping("/token")
    public ResponseEntity<?> getAccessToken(HttpServletRequest request) {
        // Buscar la cookie "access_token"
        Optional<Cookie> accessTokenCookie = Arrays.stream(request.getCookies())
                .filter(cookie -> "access_token".equals(cookie.getName()))
                .findFirst();

        if (accessTokenCookie.isPresent()) {
            String token = accessTokenCookie.get().getValue();
            return ResponseEntity.ok().body("{\"access_token\": \"" + token + "\"}");
        } else {
            return ResponseEntity.status(401).body("{\"error\": \"No token found\"}");
        }
    }
}



response.setHeader("Access-Control-Allow-Origin", origin);
    response.setHeader("Access-Control-Allow-Credentials", "true");
    response.setHeader("Access-Control-Expose-Headers", "Set-Cookie");
    response.setHeader("Vary", "Origin");


@Override
public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {

    log.info("*** CustomAuthenticationSuccessHandler ***");

    SecurityContextHolder.getContext().setAuthentication(authentication);

    // Obtener el token JWT de la autenticación
    String token = ((OidcUser) authentication.getPrincipal()).getIdToken().getTokenValue();

    // Configurar la cookie con el Access Token
    Cookie cookie = new Cookie("access_token", token);
    cookie.setHttpOnly(true); // Evita acceso desde JavaScript
    cookie.setSecure(true);   // Solo en HTTPS
    cookie.setPath("/");      // Disponible en todo el dominio
    cookie.setDomain(".frontend.com"); // Permitir que el frontend React lo use
    response.addCookie(cookie);

    // Redirigir según el rol del usuario
    if (authentication.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_ADMIN"))) {
        response.sendRedirect("/admin");
    } else {
        response.sendRedirect("https://frontend.com/home");
    }
}
