using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TuProyecto.Servicios
{
    public class ApiClientConAutenticacion : IDisposable
    {
        private readonly HttpClient _httpClient;
        private string _accessToken;

        public ApiClientConAutenticacion(string baseUrl)
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(baseUrl)
            };

            _httpClient.DefaultRequestHeaders.Accept.Clear();
            _httpClient.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));
        }

        public async Task<bool> AutenticarAsync(string username, string password)
        {
            var payload = new
            {
                username = username,
                password = password
            };

            string jsonPayload = JsonConvert.SerializeObject(payload);
            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("/auth/token", content);
            if (!response.IsSuccessStatusCode)
                return false;

            string responseContent = await response.Content.ReadAsStringAsync();
            var tokenResponse = JsonConvert.DeserializeObject<TokenResponse>(responseContent);

            _accessToken = tokenResponse?.AccessToken;
            return !string.IsNullOrEmpty(_accessToken);
        }

        public async Task<string> ObtenerInfoEmpleadoAsync()
        {
            if (string.IsNullOrEmpty(_accessToken))
                throw new InvalidOperationException("No se ha autenticado a√∫n.");

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _accessToken);

            var response = await _httpClient.GetAsync("/empleado/info");
            response.EnsureSuccessStatusCode();

            return await response.Content.ReadAsStringAsync();
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
        }

        private class TokenResponse
        {
            [JsonProperty("access_token")]
            public string AccessToken { get; set; }
        }
    }
}
