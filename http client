
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using Microsoft.IdentityModel.JsonWebTokens;
using Microsoft.IdentityModel.Tokens;

class Program
{
    static async Task Main(string[] args)
    {
        // Configuración
        string clientId = "TU-CLIENT-ID";
        string tenantId = "TU-TENANT-ID"; // ej. 8ff33436-4701-4dad-b7d3-3462e99c6889
        string certPath = @"C:\Ruta\A\clientassertioncert.pfx";
        string certPassword = "contraseña123";
        string scope = "api://hrapi/.default"; // o el scope de tu API

        // 1. Cargar certificado
        var cert = new X509Certificate2(certPath, certPassword,
            X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet);

        // 2. Crear JWT client assertion
        string clientAssertion = GetSignedClientAssertion(cert, tenantId, clientId);

        // 3. Preparar body del request
        var tokenEndpoint = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";
        var form = new Dictionary<string, string>
        {
            { "client_id", clientId },
            { "scope", scope },
            { "grant_type", "client_credentials" },
            { "client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer" },
            { "client_assertion", clientAssertion }
        };

        // 4. Enviar request
        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsync(tokenEndpoint, new FormUrlEncodedContent(form));
        var responseContent = await response.Content.ReadAsStringAsync();

        Console.WriteLine($"Status: {response.StatusCode}");
        Console.WriteLine("Response:");
        Console.WriteLine(responseContent);
    }

    static string GetSignedClientAssertion(X509Certificate2 certificate, string tenantId, string clientId)
    {
        var tokenEndpoint = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";

        var claims = new Dictionary<string, object>
        {
            { "aud", tokenEndpoint },
            { "iss", clientId },
            { "sub", clientId },
            { "jti", Guid.NewGuid().ToString() }
            // No necesitas "exp" ni "nbf", JsonWebTokenHandler los agrega automáticamente
        };

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Claims = claims,
            SigningCredentials = new X509SigningCredentials(certificate)
        };

        var handler = new JsonWebTokenHandler();
        return handler.CreateToken(tokenDescriptor);
    }
}

Microsoft.IdentityModel.JsonWebTokens




$cert = New-SelfSignedCertificate `
  -Subject "CN=ClientAssertionCert" `
  -KeyAlgorithm RSA `
  -KeyLength 2048 `
  -CertStoreLocation "Cert:\CurrentUser\My" `
  -KeyExportPolicy Exportable `
  -NotAfter (Get-Date).AddYears(1)


$pwd = ConvertTo-SecureString -String "contraseña123" -Force -AsPlainText

Export-PfxCertificate `
  -Cert "Cert:\CurrentUser\My\$($cert.Thumbprint)" `
  -FilePath "$env:USERPROFILE\Desktop\ClientAssertionCert.pfx" `
  -Password $pwd


dotnet dev-certs https --export-path "./clientassertioncert.pfx" --password "contraseña123"

var cert = new X509Certificate2("ruta/clientassertioncert.pfx", "contraseña123");



using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text.Json;
using System.Text;

static string Base64UrlEncode(byte[] input)
{
    return Convert.ToBase64String(input)
        .TrimEnd('=')
        .Replace('+', '-')
        .Replace('/', '_');
}

static string GenerateClientAssertion(X509Certificate2 certificate, string clientId, string tenantId)
{
    var rsa = certificate.GetRSAPrivateKey();
    var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
    var jti = Guid.NewGuid().ToString();

    // Header
    var header = new Dictionary<string, object>
    {
        { "alg", "RS256" },
        { "typ", "JWT" },
        { "x5t", Base64UrlEncode(certificate.GetCertHash()) }
    };

    // Payload (claims)
    var payload = new Dictionary<string, object>
    {
        { "iss", clientId },
        { "sub", clientId },
        { "aud", $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token" },
        { "jti", jti },
        { "nbf", now },
        { "exp", now + 600 } // 10 minutos
    };

    string encodedHeader = Base64UrlEncode(JsonSerializer.SerializeToUtf8Bytes(header));
    string encodedPayload = Base64UrlEncode(JsonSerializer.SerializeToUtf8Bytes(payload));

    string dataToSign = $"{encodedHeader}.{encodedPayload}";
    byte[] dataBytes = Encoding.UTF8.GetBytes(dataToSign);

    var signature = rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
    string encodedSignature = Base64UrlEncode(signature);

    return $"{dataToSign}.{encodedSignature}";
}


var jwt = GenerateClientAssertion(cert, clientId, tenantId);

var form = new Dictionary<string, string>
{
    { "client_id", clientId },
    { "scope", "api://hrapi/.default" }, // o el scope de tu API
    { "grant_type", "client_credentials" },
    { "client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer" },
    { "client_assertion", jwt }
};

var httpClient = new HttpClient();
var response = await httpClient.PostAsync(
    $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token",
    new FormUrlEncodedContent(form)
);

string responseBody = await response.Content.ReadAsStringAsync();
Console.WriteLine(responseBody);



using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TuProyecto.Servicios
{
    public class ApiClientConAutenticacion : IDisposable
    {
        private readonly HttpClient _httpClient;
        private string _accessToken;

        public ApiClientConAutenticacion(string baseUrl)
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(baseUrl)
            };

            _httpClient.DefaultRequestHeaders.Accept.Clear();
            _httpClient.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));
        }

        public async Task<bool> AutenticarAsync(string username, string password)
        {
            var payload = new
            {
                username = username,
                password = password
            };

            string jsonPayload = JsonConvert.SerializeObject(payload);
            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("/auth/token", content);
            if (!response.IsSuccessStatusCode)
                return false;

            string responseContent = await response.Content.ReadAsStringAsync();
            var tokenResponse = JsonConvert.DeserializeObject<TokenResponse>(responseContent);

            _accessToken = tokenResponse?.AccessToken;
            return !string.IsNullOrEmpty(_accessToken);
        }

        public async Task<string> ObtenerInfoEmpleadoAsync()
        {
            if (string.IsNullOrEmpty(_accessToken))
                throw new InvalidOperationException("No se ha autenticado aún.");

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _accessToken);

            var response = await _httpClient.GetAsync("/empleado/info");
            response.EnsureSuccessStatusCode();

            return await response.Content.ReadAsStringAsync();
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
        }

        private class TokenResponse
        {
            [JsonProperty("access_token")]
            public string AccessToken { get; set; }
        }
    }
}
