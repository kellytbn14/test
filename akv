Retry =
            {
                MaxRetries = 3,
                Mode = RetryMode.Exponential,
                Delay = TimeSpan.FromSeconds(0.8),
                MaxDelay = TimeSpan.FromSeconds(10),
            },



internal class AKVService
{
    public async Task<string> GetAKVaultAsync(string keyUri, string key)
    {
        var handler = new HttpClientHandler { Proxy = new WebProxy(), UseProxy = true };

        var options = new SecretClientOptions { Transport = new HttpClientTransport(handler) };

        var credentialOptions = new DefaultAzureCredentialOptions
        {
            ExcludeEnvironmentCredential = true,
            ExcludeManagedIdentityCredential = true,
            ExcludeVisualStudioCredential = true,
            ExcludeWorkloadIdentityCredential = true,
            ExcludeSharedTokenCacheCredential = true,
            ExcludeInteractiveBrowserCredential = true,
        };

        var credential = new DefaultAzureCredential(credentialOptions);

        var client = new SecretClient(new Uri(keyUri), credential, options);

        KeyVaultSecret secret = await client.GetSecretAsync(key);

        if (secret == null || secret.Value == null || string.IsNullOrEmpty(secret.Value))
        {
            throw new InvalidOperationException($"No credentials found for the key: {key}");
        }

        return secret.Value;
    }
}



public static class HrApiSecrets
{
    private static readonly Lazy<string> _clientId = new Lazy<string>(() =>
    {
        string keyVaultUri = ConfigurationManager.AppSettings["AKV.Uri"];
        string keyClientId = ConfigurationManager.AppSettings["HRAPI.AKV.KeyWamClientId"];
        return CryptoManager.GetAKVaultAsync(keyVaultUri, keyClientId).GetAwaiter().GetResult();
    });

    private static readonly Lazy<string> _clientSecret = new Lazy<string>(() =>
    {
        string keyVaultUri = ConfigurationManager.AppSettings["AKV.Uri"];
        string keyClientSecret = ConfigurationManager.AppSettings["HRAPI.AKV.KeyWamClientSecret"];
        return CryptoManager.GetAKVaultAsync(keyVaultUri, keyClientSecret).GetAwaiter().GetResult();
    });

    public static string ClientId => _clientId.Value;
    public static string ClientSecret => _clientSecret.Value;
}
